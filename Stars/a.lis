1     0000              MODULE zx_crt
2     0000              
3     0000              
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              ; SELECT CRT0 FROM -STARTUP=N COMMANDLINE OPTION ;;;;;;;;;;;;;;
6     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000              
8     0000              
9     0000              
10    0000              
11    0000              
12    0000              IFNDEF startup
13    0000              
14    0000                 ; startup undefined so select a default
15    0000              
16    0000                 defc startup = 0
17    0000              
18    0000              ENDIF
19    0000              
20    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              ;; user supplied crt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23    0000              
24    0000              
25    0000              
26    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27    0000              ;; zx48 ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29    0000              
30    0000              
31    0000                 ; standard 32 column display
32    0000                 ;
33    0000                 ; stdin  = zx_01_input_kbd_inkey
34    0000                 ; stdout = zx_01_output_char_32 full screen
35    0000                 ; stderr = dup(stdout)
36    0000              
37    0000                 IFNDEF __CRTCFG
38    0000              
39    0000                    defc __CRTCFG = 0
40    0000              
41    0000                 ENDIF
42    0000              
43    0000                 IFNDEF __MMAP
44    0000              
45    0000                    defc __MMAP = 0
46    0000              
47    0000                 ENDIF
48    0000              
49    0000              
50    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
51    0000              ;;                 zx spectrum ram model                     ;;
52    0000              ;;      generated by target/zx/startup/zx_crt_0.m4           ;;
53    0000              ;;                                                           ;;
54    0000              ;;      48k memory model  (flat 64k address space)           ;;
55    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
56    0000              
57    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
58    0000              ;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
59    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
60    0000              
61    0000              include "config_zx_public.inc"
1     0000              
2     0000              
3     0000              
4     0000              
5     0000              IFNDEF __CONFIG_Z88DK_INC_
6     0000              defc   __CONFIG_Z88DK_INC_ = 1
7     0000              
8     0000              ; Automatically Generated at Library Build Time
9     0000              
10    0000              
11    0000              
12    0000              
13    0000              
14    0000              
15    0000              
16    0000              
17    0000              
18    0000              
19    0000              PUBLIC __Z88DK
20    0000              
21    0000              
22    0000              
23    0000              
24    0000              defc __Z88DK = 1992
25    0000              
26    0000              
27    0000              
28    0000              
29    0000              
30    0000              
31    0000              
32    0000              
33    0000              
34    0000              PUBLIC __SPECTRUM
35    0000              
36    0000              PUBLIC __SPECTRUM_48
37    0000              PUBLIC __SPECTRUM_128
38    0000              PUBLIC __SPECTRUM_128_P2
39    0000              PUBLIC __SPECTRUM_128_P2A
40    0000              PUBLIC __SPECTRUM_128_P3
41    0000              PUBLIC __SPECTRUM_PENTAGON
42    0000              
43    0000              
44    0000              
45    0000              
46    0000              defc __SPECTRUM          = 1
47    0000              
48    0000              defc __SPECTRUM_48       = 1
49    0000              defc __SPECTRUM_128      = 2
50    0000              defc __SPECTRUM_128_P2   = 4
51    0000              defc __SPECTRUM_128_P2A  = 8
52    0000              defc __SPECTRUM_128_P3   = 16
53    0000              defc __SPECTRUM_PENTAGON = 32
54    0000              
55    0000              
56    0000              
57    0000              
58    0000              
59    0000              
60    0000              
61    0000              
62    0000              
63    0000              PUBLIC __Z80
64    0000              
65    0000              PUBLIC __Z80_NMOS
66    0000              PUBLIC __Z80_CMOS
67    0000              
68    0000              PUBLIC __CPU_CLOCK
69    0000              
70    0000              PUBLIC __CPU_INFO
71    0000              
72    0000              PUBLIC __CPU_INFO_ENABLE_SLL
73    0000              
74    0000              
75    0000              
76    0000              
77    0000              defc __Z80 = 0x01
78    0000              
79    0000              defc __Z80_NMOS = 0x01
80    0000              defc __Z80_CMOS = 0x02
81    0000              
82    0000              defc __CPU_CLOCK = 3500000
83    0000              
84    0000              defc __CPU_INFO = 0x00
85    0000              
86    0000              defc __CPU_INFO_ENABLE_SLL = 0x01
87    0000              
88    0000              
89    0000              
90    0000              
91    0000              
92    0000              
93    0000              
94    0000              
95    0000              
96    0000              PUBLIC __CLIB_OPT_MULTITHREAD
97    0000              
98    0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_HEAPS
99    0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FILES
100   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FLIST
101   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDTBL
102   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDSTR
103   0000              
104   0000              PUBLIC __CLIB_OPT_IMATH
105   0000              
106   0000              PUBLIC __CLIB_OPT_IMATH_FAST
107   0000              
108   0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_UNROLL
109   0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_LZEROS
110   0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_UNROLL
111   0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_LZEROS
112   0000              PUBLIC __CLIB_OPT_IMATH_FAST_LIA
113   0000              
114   0000              PUBLIC __CLIB_OPT_IMATH_SELECT
115   0000              
116   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_ASR
117   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSR
118   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSL
119   0000              
120   0000              PUBLIC __CLIB_OPT_TXT2NUM
121   0000              
122   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_BIN
123   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_OCT
124   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_DEC
125   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_HEX
126   0000              
127   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_BIN
128   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_OCT
129   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_DEC
130   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_HEX
131   0000              
132   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT
133   0000              
134   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN
135   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT
136   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC
137   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX
138   0000              
139   0000              PUBLIC __CLIB_OPT_NUM2TXT
140   0000              
141   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_BIN
142   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_OCT
143   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_DEC
144   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_HEX
145   0000              
146   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_BIN
147   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_OCT
148   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_DEC
149   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_HEX
150   0000              
151   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT
152   0000              
153   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN
154   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT
155   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC
156   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX
157   0000              
158   0000              PUBLIC __CLIB_OPT_STDIO
159   0000              
160   0000              PUBLIC __CLIB_OPT_STDIO_VALID
161   0000              
162   0000              PUBLIC CHAR_CR
163   0000              PUBLIC CHAR_LF
164   0000              PUBLIC CHAR_BS
165   0000              PUBLIC CHAR_ESC
166   0000              PUBLIC CHAR_CAPS
167   0000              PUBLIC CHAR_BELL
168   0000              PUBLIC CHAR_CTRL_C
169   0000              PUBLIC CHAR_CTRL_D
170   0000              PUBLIC CHAR_CTRL_Z
171   0000              PUBLIC CHAR_CURSOR_UC
172   0000              PUBLIC CHAR_CURSOR_LC
173   0000              PUBLIC CHAR_PASSWORD
174   0000              
175   0000              PUBLIC __CLIB_OPT_PRINTF
176   0000              
177   0000              PUBLIC __CLIB_OPT_PRINTF_d
178   0000              PUBLIC __CLIB_OPT_PRINTF_u
179   0000              PUBLIC __CLIB_OPT_PRINTF_x
180   0000              PUBLIC __CLIB_OPT_PRINTF_X
181   0000              PUBLIC __CLIB_OPT_PRINTF_o
182   0000              PUBLIC __CLIB_OPT_PRINTF_n
183   0000              PUBLIC __CLIB_OPT_PRINTF_i
184   0000              PUBLIC __CLIB_OPT_PRINTF_p
185   0000              PUBLIC __CLIB_OPT_PRINTF_B
186   0000              PUBLIC __CLIB_OPT_PRINTF_s
187   0000              PUBLIC __CLIB_OPT_PRINTF_c
188   0000              PUBLIC __CLIB_OPT_PRINTF_I
189   0000              PUBLIC __CLIB_OPT_PRINTF_ld
190   0000              PUBLIC __CLIB_OPT_PRINTF_lu
191   0000              PUBLIC __CLIB_OPT_PRINTF_lx
192   0000              PUBLIC __CLIB_OPT_PRINTF_lX
193   0000              PUBLIC __CLIB_OPT_PRINTF_lo
194   0000              PUBLIC __CLIB_OPT_PRINTF_ln
195   0000              PUBLIC __CLIB_OPT_PRINTF_li
196   0000              PUBLIC __CLIB_OPT_PRINTF_lp
197   0000              PUBLIC __CLIB_OPT_PRINTF_lB
198   0000              PUBLIC __CLIB_OPT_PRINTF_a
199   0000              PUBLIC __CLIB_OPT_PRINTF_A
200   0000              PUBLIC __CLIB_OPT_PRINTF_e
201   0000              PUBLIC __CLIB_OPT_PRINTF_E
202   0000              PUBLIC __CLIB_OPT_PRINTF_f
203   0000              PUBLIC __CLIB_OPT_PRINTF_F
204   0000              PUBLIC __CLIB_OPT_PRINTF_g
205   0000              PUBLIC __CLIB_OPT_PRINTF_G
206   0000              
207   0000              PUBLIC __CLIB_OPT_PRINTF_2
208   0000              
209   0000              PUBLIC __CLIB_OPT_PRINTF_2_lld
210   0000              PUBLIC __CLIB_OPT_PRINTF_2_llu
211   0000              PUBLIC __CLIB_OPT_PRINTF_2_llx
212   0000              PUBLIC __CLIB_OPT_PRINTF_2_llX
213   0000              PUBLIC __CLIB_OPT_PRINTF_2_llo
214   0000              PUBLIC __CLIB_OPT_PRINTF_2_lli
215   0000              
216   0000              PUBLIC __CLIB_OPT_SCANF
217   0000              
218   0000              PUBLIC __CLIB_OPT_SCANF_d
219   0000              PUBLIC __CLIB_OPT_SCANF_u
220   0000              PUBLIC __CLIB_OPT_SCANF_x
221   0000              PUBLIC __CLIB_OPT_SCANF_X
222   0000              PUBLIC __CLIB_OPT_SCANF_o
223   0000              PUBLIC __CLIB_OPT_SCANF_n
224   0000              PUBLIC __CLIB_OPT_SCANF_i
225   0000              PUBLIC __CLIB_OPT_SCANF_p
226   0000              PUBLIC __CLIB_OPT_SCANF_B
227   0000              PUBLIC __CLIB_OPT_SCANF_s
228   0000              PUBLIC __CLIB_OPT_SCANF_c
229   0000              PUBLIC __CLIB_OPT_SCANF_I
230   0000              PUBLIC __CLIB_OPT_SCANF_ld
231   0000              PUBLIC __CLIB_OPT_SCANF_lu
232   0000              PUBLIC __CLIB_OPT_SCANF_lx
233   0000              PUBLIC __CLIB_OPT_SCANF_lX
234   0000              PUBLIC __CLIB_OPT_SCANF_lo
235   0000              PUBLIC __CLIB_OPT_SCANF_ln
236   0000              PUBLIC __CLIB_OPT_SCANF_li
237   0000              PUBLIC __CLIB_OPT_SCANF_lp
238   0000              PUBLIC __CLIB_OPT_SCANF_lB
239   0000              PUBLIC __CLIB_OPT_SCANF_BRACKET
240   0000              PUBLIC __CLIB_OPT_SCANF_a
241   0000              PUBLIC __CLIB_OPT_SCANF_A
242   0000              PUBLIC __CLIB_OPT_SCANF_e
243   0000              PUBLIC __CLIB_OPT_SCANF_E
244   0000              PUBLIC __CLIB_OPT_SCANF_f
245   0000              PUBLIC __CLIB_OPT_SCANF_F
246   0000              PUBLIC __CLIB_OPT_SCANF_g
247   0000              PUBLIC __CLIB_OPT_SCANF_G
248   0000              
249   0000              PUBLIC __CLIB_OPT_SCANF_2
250   0000              
251   0000              PUBLIC __CLIB_OPT_SCANF_2_lld
252   0000              PUBLIC __CLIB_OPT_SCANF_2_llu
253   0000              PUBLIC __CLIB_OPT_SCANF_2_llx
254   0000              PUBLIC __CLIB_OPT_SCANF_2_llX
255   0000              PUBLIC __CLIB_OPT_SCANF_2_llo
256   0000              PUBLIC __CLIB_OPT_SCANF_2_lli
257   0000              
258   0000              PUBLIC __CLIB_OPT_FASTCOPY
259   0000              
260   0000              PUBLIC __CLIB_OPT_FASTCOPY_MEMCPY
261   0000              PUBLIC __CLIB_OPT_FASTCOPY_MEMSET
262   0000              PUBLIC __CLIB_OPT_FASTCOPY_LDIR
263   0000              PUBLIC __CLIB_OPT_FASTCOPY_LDIR_SMC
264   0000              PUBLIC __CLIB_OPT_FASTCOPY_MEMCPY_SMC
265   0000              
266   0000              PUBLIC __CLIB_OPT_STRTOD
267   0000              
268   0000              PUBLIC __CLIB_OPT_STRTOD_NAN
269   0000              PUBLIC __CLIB_OPT_STRTOD_INF
270   0000              PUBLIC __CLIB_OPT_STRTOD_HEX
271   0000              
272   0000              PUBLIC __CLIB_OPT_SORT
273   0000              
274   0000              PUBLIC __CLIB_OPT_SORT_INSERTION
275   0000              PUBLIC __CLIB_OPT_SORT_SHELL
276   0000              PUBLIC __CLIB_OPT_SORT_QUICK
277   0000              
278   0000              PUBLIC __CLIB_OPT_SORT_QSORT
279   0000              
280   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT
281   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_MID
282   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_RAN
283   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION
284   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL
285   0000              
286   0000              PUBLIC __CLIB_OPT_ERROR
287   0000              
288   0000              PUBLIC __CLIB_OPT_ERROR_ENABLED
289   0000              PUBLIC __CLIB_OPT_ERROR_VERBOSE
290   0000              
291   0000              
292   0000              
293   0000              
294   0000              defc __CLIB_OPT_MULTITHREAD = 0x00
295   0000              
296   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_HEAPS = 0x01
297   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FILES = 0x02
298   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FLIST = 0x04
299   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDTBL = 0x08
300   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDSTR = 0x10
301   0000              
302   0000              defc __CLIB_OPT_IMATH = 0
303   0000              
304   0000              defc __CLIB_OPT_IMATH_FAST = 0x0f
305   0000              
306   0000              defc __CLIB_OPT_IMATH_FAST_DIV_UNROLL = 0x01
307   0000              defc __CLIB_OPT_IMATH_FAST_DIV_LZEROS = 0x02
308   0000              defc __CLIB_OPT_IMATH_FAST_MUL_UNROLL = 0x04
309   0000              defc __CLIB_OPT_IMATH_FAST_MUL_LZEROS = 0x08
310   0000              defc __CLIB_OPT_IMATH_FAST_LIA = 0x80
311   0000              
312   0000              defc __CLIB_OPT_IMATH_SELECT = 0x00
313   0000              
314   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_ASR = 0x01
315   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSR = 0x02
316   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSL = 0x04
317   0000              
318   0000              defc __CLIB_OPT_TXT2NUM = 0x04
319   0000              
320   0000              defc __CLIB_OPT_TXT2NUM_INT_BIN = 0x01
321   0000              defc __CLIB_OPT_TXT2NUM_INT_OCT = 0x02
322   0000              defc __CLIB_OPT_TXT2NUM_INT_DEC = 0x04
323   0000              defc __CLIB_OPT_TXT2NUM_INT_HEX = 0x08
324   0000              
325   0000              defc __CLIB_OPT_TXT2NUM_LONG_BIN = 0x10
326   0000              defc __CLIB_OPT_TXT2NUM_LONG_OCT = 0x20
327   0000              defc __CLIB_OPT_TXT2NUM_LONG_DEC = 0x40
328   0000              defc __CLIB_OPT_TXT2NUM_LONG_HEX = 0x80
329   0000              
330   0000              defc __CLIB_OPT_TXT2NUM_SELECT = 0x00
331   0000              
332   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN = 0x01
333   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT = 0x02
334   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC = 0x04
335   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX = 0x08
336   0000              
337   0000              defc __CLIB_OPT_NUM2TXT = 0x00
338   0000              
339   0000              defc __CLIB_OPT_NUM2TXT_INT_BIN = 0x01
340   0000              defc __CLIB_OPT_NUM2TXT_INT_OCT = 0x02
341   0000              defc __CLIB_OPT_NUM2TXT_INT_DEC = 0x04
342   0000              defc __CLIB_OPT_NUM2TXT_INT_HEX = 0x08
343   0000              
344   0000              defc __CLIB_OPT_NUM2TXT_LONG_BIN = 0x10
345   0000              defc __CLIB_OPT_NUM2TXT_LONG_OCT = 0x20
346   0000              defc __CLIB_OPT_NUM2TXT_LONG_DEC = 0x40
347   0000              defc __CLIB_OPT_NUM2TXT_LONG_HEX = 0x80
348   0000              
349   0000              defc __CLIB_OPT_NUM2TXT_SELECT = 0x00
350   0000              
351   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN = 0x01
352   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT = 0x02
353   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC = 0x04
354   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX = 0x08
355   0000              
356   0000              defc __CLIB_OPT_STDIO = 0x00
357   0000              
358   0000              defc __CLIB_OPT_STDIO_VALID = 0x01
359   0000              
360   0000              defc CHAR_CR = 13
361   0000              defc CHAR_LF = 10
362   0000              defc CHAR_BS = 12
363   0000              defc CHAR_ESC = 27
364   0000              defc CHAR_CAPS = 6
365   0000              defc CHAR_BELL = 7
366   0000              defc CHAR_CTRL_C = 3
367   0000              defc CHAR_CTRL_D = 4
368   0000              defc CHAR_CTRL_Z = 26
369   0000              defc CHAR_CURSOR_UC = 45
370   0000              defc CHAR_CURSOR_LC = 95
371   0000              defc CHAR_PASSWORD = 42
372   0000              
373   0000              defc __CLIB_OPT_PRINTF = 0x002ff6ff
374   0000              
375   0000              defc __CLIB_OPT_PRINTF_d = 0x00000001
376   0000              defc __CLIB_OPT_PRINTF_u = 0x00000002
377   0000              defc __CLIB_OPT_PRINTF_x = 0x00000004
378   0000              defc __CLIB_OPT_PRINTF_X = 0x00000008
379   0000              defc __CLIB_OPT_PRINTF_o = 0x00000010
380   0000              defc __CLIB_OPT_PRINTF_n = 0x00000020
381   0000              defc __CLIB_OPT_PRINTF_i = 0x00000040
382   0000              defc __CLIB_OPT_PRINTF_p = 0x00000080
383   0000              defc __CLIB_OPT_PRINTF_B = 0x00000100
384   0000              defc __CLIB_OPT_PRINTF_s = 0x00000200
385   0000              defc __CLIB_OPT_PRINTF_c = 0x00000400
386   0000              defc __CLIB_OPT_PRINTF_I = 0x00000800
387   0000              defc __CLIB_OPT_PRINTF_ld = 0x00001000
388   0000              defc __CLIB_OPT_PRINTF_lu = 0x00002000
389   0000              defc __CLIB_OPT_PRINTF_lx = 0x00004000
390   0000              defc __CLIB_OPT_PRINTF_lX = 0x00008000
391   0000              defc __CLIB_OPT_PRINTF_lo = 0x00010000
392   0000              defc __CLIB_OPT_PRINTF_ln = 0x00020000
393   0000              defc __CLIB_OPT_PRINTF_li = 0x00040000
394   0000              defc __CLIB_OPT_PRINTF_lp = 0x00080000
395   0000              defc __CLIB_OPT_PRINTF_lB = 0x00100000
396   0000              defc __CLIB_OPT_PRINTF_a = 0x00400000
397   0000              defc __CLIB_OPT_PRINTF_A = 0x00800000
398   0000              defc __CLIB_OPT_PRINTF_e = 0x01000000
399   0000              defc __CLIB_OPT_PRINTF_E = 0x02000000
400   0000              defc __CLIB_OPT_PRINTF_f = 0x04000000
401   0000              defc __CLIB_OPT_PRINTF_F = 0x08000000
402   0000              defc __CLIB_OPT_PRINTF_g = 0x10000000
403   0000              defc __CLIB_OPT_PRINTF_G = 0x20000000
404   0000              
405   0000              defc __CLIB_OPT_PRINTF_2 = 0x00
406   0000              
407   0000              defc __CLIB_OPT_PRINTF_2_lld = 0x01
408   0000              defc __CLIB_OPT_PRINTF_2_llu = 0x02
409   0000              defc __CLIB_OPT_PRINTF_2_llx = 0x04
410   0000              defc __CLIB_OPT_PRINTF_2_llX = 0x08
411   0000              defc __CLIB_OPT_PRINTF_2_llo = 0x10
412   0000              defc __CLIB_OPT_PRINTF_2_lli = 0x40
413   0000              
414   0000              defc __CLIB_OPT_SCANF = 0x002ff6ff
415   0000              
416   0000              defc __CLIB_OPT_SCANF_d = 0x00000001
417   0000              defc __CLIB_OPT_SCANF_u = 0x00000002
418   0000              defc __CLIB_OPT_SCANF_x = 0x00000004
419   0000              defc __CLIB_OPT_SCANF_X = 0x00000008
420   0000              defc __CLIB_OPT_SCANF_o = 0x00000010
421   0000              defc __CLIB_OPT_SCANF_n = 0x00000020
422   0000              defc __CLIB_OPT_SCANF_i = 0x00000040
423   0000              defc __CLIB_OPT_SCANF_p = 0x00000080
424   0000              defc __CLIB_OPT_SCANF_B = 0x00000100
425   0000              defc __CLIB_OPT_SCANF_s = 0x00000200
426   0000              defc __CLIB_OPT_SCANF_c = 0x00000400
427   0000              defc __CLIB_OPT_SCANF_I = 0x00000800
428   0000              defc __CLIB_OPT_SCANF_ld = 0x00001000
429   0000              defc __CLIB_OPT_SCANF_lu = 0x00002000
430   0000              defc __CLIB_OPT_SCANF_lx = 0x00004000
431   0000              defc __CLIB_OPT_SCANF_lX = 0x00008000
432   0000              defc __CLIB_OPT_SCANF_lo = 0x00010000
433   0000              defc __CLIB_OPT_SCANF_ln = 0x00020000
434   0000              defc __CLIB_OPT_SCANF_li = 0x00040000
435   0000              defc __CLIB_OPT_SCANF_lp = 0x00080000
436   0000              defc __CLIB_OPT_SCANF_lB = 0x00100000
437   0000              defc __CLIB_OPT_SCANF_BRACKET = 0x00200000
438   0000              defc __CLIB_OPT_SCANF_a = 0x00400000
439   0000              defc __CLIB_OPT_SCANF_A = 0x00800000
440   0000              defc __CLIB_OPT_SCANF_e = 0x01000000
441   0000              defc __CLIB_OPT_SCANF_E = 0x02000000
442   0000              defc __CLIB_OPT_SCANF_f = 0x04000000
443   0000              defc __CLIB_OPT_SCANF_F = 0x08000000
444   0000              defc __CLIB_OPT_SCANF_g = 0x10000000
445   0000              defc __CLIB_OPT_SCANF_G = 0x20000000
446   0000              
447   0000              defc __CLIB_OPT_SCANF_2 = 0x00
448   0000              
449   0000              defc __CLIB_OPT_SCANF_2_lld = 0x01
450   0000              defc __CLIB_OPT_SCANF_2_llu = 0x02
451   0000              defc __CLIB_OPT_SCANF_2_llx = 0x04
452   0000              defc __CLIB_OPT_SCANF_2_llX = 0x08
453   0000              defc __CLIB_OPT_SCANF_2_llo = 0x10
454   0000              defc __CLIB_OPT_SCANF_2_lli = 0x40
455   0000              
456   0000              defc __CLIB_OPT_FASTCOPY = 0x00
457   0000              
458   0000              defc __CLIB_OPT_FASTCOPY_MEMCPY = 0x01
459   0000              defc __CLIB_OPT_FASTCOPY_MEMSET = 0x02
460   0000              defc __CLIB_OPT_FASTCOPY_LDIR = 0x20
461   0000              defc __CLIB_OPT_FASTCOPY_LDIR_SMC = 0x40
462   0000              defc __CLIB_OPT_FASTCOPY_MEMCPY_SMC = 0x80
463   0000              
464   0000              defc __CLIB_OPT_STRTOD = 0x00
465   0000              
466   0000              defc __CLIB_OPT_STRTOD_NAN = 0x01
467   0000              defc __CLIB_OPT_STRTOD_INF = 0x01
468   0000              defc __CLIB_OPT_STRTOD_HEX = 0x02
469   0000              
470   0000              defc __CLIB_OPT_SORT = 1
471   0000              
472   0000              defc __CLIB_OPT_SORT_INSERTION = 0
473   0000              defc __CLIB_OPT_SORT_SHELL = 1
474   0000              defc __CLIB_OPT_SORT_QUICK = 2
475   0000              
476   0000              defc __CLIB_OPT_SORT_QSORT = 0x0c
477   0000              
478   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT = 0x3
479   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_MID = 0x0
480   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_RAN = 0x1
481   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION = 0x04
482   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL = 0x08
483   0000              
484   0000              defc __CLIB_OPT_ERROR = 0x00
485   0000              
486   0000              defc __CLIB_OPT_ERROR_ENABLED = 0x01
487   0000              defc __CLIB_OPT_ERROR_VERBOSE = 0x02
488   0000              
489   0000              
490   0000              
491   0000              
492   0000              
493   0000              
494   0000              
495   0000              
496   0000              
497   0000              
498   0000              
499   0000              
500   0000              
501   0000              PUBLIC __EOK
502   0000              PUBLIC __EACCES
503   0000              PUBLIC __EBADF
504   0000              PUBLIC __EBDFD
505   0000              PUBLIC __EDOM
506   0000              PUBLIC __EFBIG
507   0000              PUBLIC __EINVAL
508   0000              PUBLIC __EMFILE
509   0000              PUBLIC __ENFILE
510   0000              PUBLIC __ENOLCK
511   0000              PUBLIC __ENOMEM
512   0000              PUBLIC __ENOTSUP
513   0000              PUBLIC __EOVERFLOW
514   0000              PUBLIC __ERANGE
515   0000              PUBLIC __ESTAT
516   0000              PUBLIC __EAGAIN
517   0000              PUBLIC __EWOULDBLOCK
518   0000              
519   0000              PUBLIC __ERROR_NEXT
520   0000              
521   0000              PUBLIC STDIO_SEEK_SET
522   0000              PUBLIC STDIO_SEEK_CUR
523   0000              PUBLIC STDIO_SEEK_END
524   0000              
525   0000              PUBLIC STDIO_MSG_PUTC
526   0000              PUBLIC STDIO_MSG_WRIT
527   0000              PUBLIC STDIO_MSG_GETC
528   0000              PUBLIC STDIO_MSG_EATC
529   0000              PUBLIC STDIO_MSG_READ
530   0000              PUBLIC STDIO_MSG_SEEK
531   0000              PUBLIC STDIO_MSG_ICTL
532   0000              PUBLIC STDIO_MSG_FLSH
533   0000              PUBLIC STDIO_MSG_CLOS
534   0000              
535   0000              PUBLIC ITERM_MSG_GETC
536   0000              PUBLIC ITERM_MSG_INTERRUPT
537   0000              PUBLIC ITERM_MSG_PUTC
538   0000              PUBLIC ITERM_MSG_PRINT_CURSOR
539   0000              PUBLIC ITERM_MSG_ERASE_CURSOR
540   0000              PUBLIC ITERM_MSG_ERASE_CURSOR_PWD
541   0000              PUBLIC ITERM_MSG_BS
542   0000              PUBLIC ITERM_MSG_BS_PWD
543   0000              PUBLIC ITERM_MSG_READLINE_BEGIN
544   0000              PUBLIC ITERM_MSG_READLINE_END
545   0000              PUBLIC ITERM_MSG_BELL
546   0000              
547   0000              PUBLIC __MESSAGE_ITERM_NEXT__
548   0000              
549   0000              PUBLIC OTERM_MSG_PUTC
550   0000              PUBLIC OTERM_MSG_TTY
551   0000              PUBLIC OTERM_MSG_PRINTC
552   0000              PUBLIC OTERM_MSG_SCROLL
553   0000              PUBLIC OTERM_MSG_CLS
554   0000              PUBLIC OTERM_MSG_PAUSE
555   0000              PUBLIC OTERM_MSG_BELL
556   0000              PUBLIC OTERM_MSG_PSCROLL
557   0000              
558   0000              PUBLIC __MESSAGE_OTERM_NEXT__
559   0000              
560   0000              PUBLIC ICHAR_MSG_GETC
561   0000              PUBLIC OCHAR_MSG_PUTC_BIN
562   0000              PUBLIC OCHAR_MSG_PUTC
563   0000              
564   0000              PUBLIC __MESSAGE_NEXT__
565   0000              
566   0000              PUBLIC mtx_plain
567   0000              PUBLIC mtx_recursive
568   0000              PUBLIC mtx_timed
569   0000              
570   0000              PUBLIC thrd_success
571   0000              PUBLIC thrd_error
572   0000              PUBLIC thrd_nomem
573   0000              PUBLIC thrd_busy
574   0000              PUBLIC thrd_timedout
575   0000              
576   0000              PUBLIC IOCTL_RESET
577   0000              
578   0000              PUBLIC IOCTL_ITERM_ECHO
579   0000              PUBLIC IOCTL_ITERM_PASS
580   0000              PUBLIC IOCTL_ITERM_LINE
581   0000              PUBLIC IOCTL_ITERM_COOK
582   0000              PUBLIC IOCTL_ITERM_CAPS
583   0000              PUBLIC IOCTL_ITERM_CRLF
584   0000              PUBLIC IOCTL_ITERM_CURS
585   0000              
586   0000              PUBLIC IOCTL_ITERM_TIE
587   0000              PUBLIC IOCTL_ITERM_GET_EDITBUF
588   0000              PUBLIC IOCTL_ITERM_SET_EDITBUF
589   0000              
590   0000              PUBLIC IOCTL_OTERM_PAGE
591   0000              PUBLIC IOCTL_OTERM_PAUSE
592   0000              PUBLIC IOCTL_OTERM_COOK
593   0000              PUBLIC IOCTL_OTERM_CRLF
594   0000              PUBLIC IOCTL_OTERM_CLEAR
595   0000              PUBLIC IOCTL_OTERM_SIGNAL
596   0000              PUBLIC IOCTL_OTERM_BELL
597   0000              
598   0000              PUBLIC IOCTL_OTERM_CLS
599   0000              PUBLIC IOCTL_OTERM_RESET_SCROLL
600   0000              PUBLIC IOCTL_OTERM_GET_WINDOW_COORD
601   0000              PUBLIC IOCTL_OTERM_SET_WINDOW_COORD
602   0000              PUBLIC IOCTL_OTERM_GET_WINDOW_RECT
603   0000              PUBLIC IOCTL_OTERM_SET_WINDOW_RECT
604   0000              PUBLIC IOCTL_OTERM_GET_CURSOR_COORD
605   0000              PUBLIC IOCTL_OTERM_SET_CURSOR_COORD
606   0000              PUBLIC IOCTL_OTERM_GET_OTERM
607   0000              PUBLIC IOCTL_OTERM_SCROLL
608   0000              PUBLIC IOCTL_OTERM_FONT
609   0000              
610   0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_COORD
611   0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_COORD
612   0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_RECT
613   0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_RECT
614   0000              PUBLIC IOCTL_OTERM_FZX_LEFT_MARGIN
615   0000              PUBLIC IOCTL_OTERM_FZX_LINE_SPACING
616   0000              PUBLIC IOCTL_OTERM_FZX_SPACE_EXPAND
617   0000              PUBLIC IOCTL_OTERM_FZX_GET_FZX_STATE
618   0000              PUBLIC IOCTL_OTERM_FZX_SET_FZX_STATE
619   0000              
620   0000              PUBLIC IOCTL_ICHAR_CRLF
621   0000              
622   0000              PUBLIC IOCTL_OCHAR_CRLF
623   0000              
624   0000              
625   0000              
626   0000              
627   0000              defc __EOK = 0
628   0000              defc __EACCES = 1
629   0000              defc __EBADF = 2
630   0000              defc __EBDFD = 3
631   0000              defc __EDOM = 4
632   0000              defc __EFBIG = 5
633   0000              defc __EINVAL = 6
634   0000              defc __EMFILE = 7
635   0000              defc __ENFILE = 8
636   0000              defc __ENOLCK = 9
637   0000              defc __ENOMEM = 10
638   0000              defc __ENOTSUP = 11
639   0000              defc __EOVERFLOW = 12
640   0000              defc __ERANGE = 13
641   0000              defc __ESTAT = 14
642   0000              defc __EAGAIN = 15
643   0000              defc __EWOULDBLOCK = 15
644   0000              
645   0000              defc __ERROR_NEXT = 50
646   0000              
647   0000              defc STDIO_SEEK_SET = 0
648   0000              defc STDIO_SEEK_CUR = 1
649   0000              defc STDIO_SEEK_END = 2
650   0000              
651   0000              defc STDIO_MSG_PUTC = 1
652   0000              defc STDIO_MSG_WRIT = 2
653   0000              defc STDIO_MSG_GETC = 3
654   0000              defc STDIO_MSG_EATC = 4
655   0000              defc STDIO_MSG_READ = 5
656   0000              defc STDIO_MSG_SEEK = 6
657   0000              defc STDIO_MSG_ICTL = 7
658   0000              defc STDIO_MSG_FLSH = 8
659   0000              defc STDIO_MSG_CLOS = 9
660   0000              
661   0000              defc ITERM_MSG_GETC = 15
662   0000              defc ITERM_MSG_INTERRUPT = 16
663   0000              defc ITERM_MSG_PUTC = 17
664   0000              defc ITERM_MSG_PRINT_CURSOR = 18
665   0000              defc ITERM_MSG_ERASE_CURSOR = 19
666   0000              defc ITERM_MSG_ERASE_CURSOR_PWD = 20
667   0000              defc ITERM_MSG_BS = 21
668   0000              defc ITERM_MSG_BS_PWD = 22
669   0000              defc ITERM_MSG_READLINE_BEGIN = 23
670   0000              defc ITERM_MSG_READLINE_END = 24
671   0000              defc ITERM_MSG_BELL = 25
672   0000              
673   0000              defc __MESSAGE_ITERM_NEXT__ = 26
674   0000              
675   0000              defc OTERM_MSG_PUTC = 30
676   0000              defc OTERM_MSG_TTY = 31
677   0000              defc OTERM_MSG_PRINTC = 32
678   0000              defc OTERM_MSG_SCROLL = 33
679   0000              defc OTERM_MSG_CLS = 34
680   0000              defc OTERM_MSG_PAUSE = 35
681   0000              defc OTERM_MSG_BELL = 36
682   0000              defc OTERM_MSG_PSCROLL = 37
683   0000              
684   0000              defc __MESSAGE_OTERM_NEXT__ = 38
685   0000              
686   0000              defc ICHAR_MSG_GETC = 15
687   0000              defc OCHAR_MSG_PUTC_BIN = 30
688   0000              defc OCHAR_MSG_PUTC = 32
689   0000              
690   0000              defc __MESSAGE_NEXT__ = 45
691   0000              
692   0000              defc mtx_plain = 0x01
693   0000              defc mtx_recursive = 0x02
694   0000              defc mtx_timed = 0x04
695   0000              
696   0000              defc thrd_success = 0x00
697   0000              defc thrd_error = 0x01
698   0000              defc thrd_nomem = 0x02
699   0000              defc thrd_busy = 0x04
700   0000              defc thrd_timedout = 0x08
701   0000              
702   0000              defc IOCTL_RESET = 0x0000
703   0000              
704   0000              defc IOCTL_ITERM_ECHO = 0xc081
705   0000              defc IOCTL_ITERM_PASS = 0xc041
706   0000              defc IOCTL_ITERM_LINE = 0xc021
707   0000              defc IOCTL_ITERM_COOK = 0xc011
708   0000              defc IOCTL_ITERM_CAPS = 0xc009
709   0000              defc IOCTL_ITERM_CRLF = 0xc101
710   0000              defc IOCTL_ITERM_CURS = 0xc201
711   0000              
712   0000              defc IOCTL_ITERM_TIE = 0x0201
713   0000              defc IOCTL_ITERM_GET_EDITBUF = 0x0381
714   0000              defc IOCTL_ITERM_SET_EDITBUF = 0x0301
715   0000              
716   0000              defc IOCTL_OTERM_PAGE = 0xc082
717   0000              defc IOCTL_OTERM_PAUSE = 0xc042
718   0000              defc IOCTL_OTERM_COOK = 0xc022
719   0000              defc IOCTL_OTERM_CRLF = 0xc012
720   0000              defc IOCTL_OTERM_CLEAR = 0xe002
721   0000              defc IOCTL_OTERM_SIGNAL = 0xc202
722   0000              defc IOCTL_OTERM_BELL = 0xc102
723   0000              
724   0000              defc IOCTL_OTERM_CLS = 0x0102
725   0000              defc IOCTL_OTERM_RESET_SCROLL = 0x0202
726   0000              defc IOCTL_OTERM_GET_WINDOW_COORD = 0x0382
727   0000              defc IOCTL_OTERM_SET_WINDOW_COORD = 0x0302
728   0000              defc IOCTL_OTERM_GET_WINDOW_RECT = 0x0482
729   0000              defc IOCTL_OTERM_SET_WINDOW_RECT = 0x0402
730   0000              defc IOCTL_OTERM_GET_CURSOR_COORD = 0x0582
731   0000              defc IOCTL_OTERM_SET_CURSOR_COORD = 0x0502
732   0000              defc IOCTL_OTERM_GET_OTERM = 0x0602
733   0000              defc IOCTL_OTERM_SCROLL = 0x0702
734   0000              defc IOCTL_OTERM_FONT = 0x0802
735   0000              
736   0000              defc IOCTL_OTERM_FZX_GET_PAPER_COORD = 0x0a82
737   0000              defc IOCTL_OTERM_FZX_SET_PAPER_COORD = 0x0a02
738   0000              defc IOCTL_OTERM_FZX_GET_PAPER_RECT = 0x0b82
739   0000              defc IOCTL_OTERM_FZX_SET_PAPER_RECT = 0x0b02
740   0000              defc IOCTL_OTERM_FZX_LEFT_MARGIN = 0x0c02
741   0000              defc IOCTL_OTERM_FZX_LINE_SPACING = 0x0d02
742   0000              defc IOCTL_OTERM_FZX_SPACE_EXPAND = 0x0e02
743   0000              defc IOCTL_OTERM_FZX_GET_FZX_STATE = 0x0f82
744   0000              defc IOCTL_OTERM_FZX_SET_FZX_STATE = 0x0f02
745   0000              
746   0000              defc IOCTL_ICHAR_CRLF = 0xc103
747   0000              
748   0000              defc IOCTL_OCHAR_CRLF = 0xc014
749   0000              
750   0000              
751   0000              
752   0000              
753   0000              
754   0000              
755   0000              
756   0000              
757   0000              
758   0000              
759   0000              
760   0000              PUBLIC IOCTL_ITERM_GET_DELAY
761   0000              PUBLIC IOCTL_ITERM_SET_DELAY
762   0000              
763   0000              PUBLIC IOCTL_ITERM_LASTK
764   0000              
765   0000              PUBLIC IOCTL_OTERM_FCOLOR
766   0000              PUBLIC IOCTL_OTERM_FMASK
767   0000              PUBLIC IOCTL_OTERM_BCOLOR
768   0000              
769   0000              
770   0000              
771   0000              
772   0000              defc IOCTL_ITERM_GET_DELAY = 0x1081
773   0000              defc IOCTL_ITERM_SET_DELAY = 0x1001
774   0000              
775   0000              defc IOCTL_ITERM_LASTK     = 0x1101
776   0000              
777   0000              defc IOCTL_OTERM_FCOLOR    = 0x1002
778   0000              defc IOCTL_OTERM_FMASK     = 0x1102
779   0000              defc IOCTL_OTERM_BCOLOR    = 0x1202
780   0000              
781   0000              
782   0000              
783   0000              
784   0000              
785   0000              
786   0000              
787   0000              
788   0000              
789   0000              
790   0000              
791   0000              
792   0000              PUBLIC __BIFROST2_ANIM_GROUP
793   0000              PUBLIC __BIFROST2_STATIC_MIN
794   0000              PUBLIC __BIFROST2_STATIC_OVERLAP
795   0000              PUBLIC __BIFROST2_TILE_IMAGES
796   0000              PUBLIC __BIFROST2_TILE_ORDER
797   0000              PUBLIC __BIFROST2_TILE_MAP
798   0000              PUBLIC __BIFROST2_TOTAL_ROWS
799   0000              PUBLIC __BIFROST2_HOLE
800   0000              PUBLIC _BIFROST2_HOLE
801   0000              PUBLIC __BIFROST2_HOLE_SIZE
802   0000              
803   0000              
804   0000              
805   0000              
806   0000              defc __BIFROST2_ANIM_GROUP     = 4
807   0000              defc __BIFROST2_STATIC_MIN     = 128
808   0000              defc __BIFROST2_STATIC_OVERLAP = 128
809   0000              defc __BIFROST2_TILE_IMAGES    = 49000
810   0000              defc __BIFROST2_TILE_ORDER     = 7
811   0000              defc __BIFROST2_TILE_MAP       = 65281
812   0000              defc __BIFROST2_TOTAL_ROWS     = 22
813   0000              defc __BIFROST2_HOLE           = 64839
814   0000              defc _BIFROST2_HOLE            = 64839
815   0000              defc __BIFROST2_HOLE_SIZE      = 0
816   0000              
817   0000              ; define(`__BIFROST2_TOTAL_ROWS', 22)
818   0000              
819   0000              
820   0000              
821   0000              
822   0000              
823   0000              
824   0000              
825   0000              
826   0000              
827   0000              PUBLIC __BIFROSTH_ANIM_SPEED
828   0000              PUBLIC __BIFROSTH_ANIM_GROUP
829   0000              PUBLIC __BIFROSTH_STATIC_MIN
830   0000              PUBLIC __BIFROSTH_STATIC_OVERLAP
831   0000              PUBLIC __BIFROSTH_TILE_IMAGES
832   0000              PUBLIC __BIFROSTH_TILE_MAP
833   0000              PUBLIC __BIFROSTH_TILE_ORDER
834   0000              PUBLIC __BIFROSTH_SHIFT_COLUMNS
835   0000              PUBLIC __BIFROSTH_SPRITE_MODE
836   0000              
837   0000              
838   0000              
839   0000              
840   0000              defc __BIFROSTH_ANIM_SPEED     = 4
841   0000              defc __BIFROSTH_ANIM_GROUP     = 4
842   0000              defc __BIFROSTH_STATIC_MIN     = 128
843   0000              defc __BIFROSTH_STATIC_OVERLAP = 128
844   0000              defc __BIFROSTH_TILE_IMAGES    = 48500
845   0000              defc __BIFROSTH_TILE_MAP       = 65281
846   0000              defc __BIFROSTH_TILE_ORDER     = 7
847   0000              defc __BIFROSTH_SHIFT_COLUMNS  = 0
848   0000              defc __BIFROSTH_SPRITE_MODE    = 0
849   0000              
850   0000              
851   0000              
852   0000              
853   0000              
854   0000              
855   0000              
856   0000              
857   0000              
858   0000              PUBLIC __BIFROSTL_ANIM_SPEED
859   0000              PUBLIC __BIFROSTL_ANIM_GROUP
860   0000              PUBLIC __BIFROSTL_STATIC_MIN
861   0000              PUBLIC __BIFROSTL_STATIC_OVERLAP
862   0000              PUBLIC __BIFROSTL_TILE_IMAGES
863   0000              PUBLIC __BIFROSTL_TILE_MAP
864   0000              PUBLIC __BIFROSTL_TILE_ORDER
865   0000              
866   0000              
867   0000              
868   0000              
869   0000              defc __BIFROSTL_ANIM_SPEED     = 4
870   0000              defc __BIFROSTL_ANIM_GROUP     = 4
871   0000              defc __BIFROSTL_STATIC_MIN     = 128
872   0000              defc __BIFROSTL_STATIC_OVERLAP = 128
873   0000              defc __BIFROSTL_TILE_IMAGES    = 48500
874   0000              defc __BIFROSTL_TILE_MAP       = 65281
875   0000              defc __BIFROSTL_TILE_ORDER     = 7
876   0000              
877   0000              
878   0000              
879   0000              
880   0000              
881   0000              
882   0000              
883   0000              
884   0000              
885   0000              PUBLIC __NIRVANAM_OPTIONS
886   0000              
887   0000              PUBLIC __NIRVANAM_OPTIONS_WIDE_DRAW
888   0000              PUBLIC __NIRVANAM_OPTIONS_WIDE_SPRITES
889   0000              
890   0000              PUBLIC __NIRVANAM_TOTAL_ROWS
891   0000              PUBLIC __NIRVANAM_HOLE
892   0000              PUBLIC _NIRVANAM_HOLE
893   0000              PUBLIC __NIRVANAM_HOLE_SIZE
894   0000              
895   0000              PUBLIC __NIRVANAM_TILE_IMAGES
896   0000              PUBLIC __NIRVANAM_WIDE_IMAGES
897   0000              PUBLIC __NIRVANAM_CHAR_TABLE
898   0000              
899   0000              
900   0000              
901   0000              
902   0000              defc __NIRVANAM_OPTIONS = 0
903   0000              
904   0000              defc __NIRVANAM_OPTIONS_WIDE_DRAW    = 0x01
905   0000              defc __NIRVANAM_OPTIONS_WIDE_SPRITES = 0x02
906   0000              
907   0000              defc __NIRVANAM_TOTAL_ROWS  = 22
908   0000              defc __NIRVANAM_HOLE        = 64994
909   0000              defc _NIRVANAM_HOLE         = 64994
910   0000              defc __NIRVANAM_HOLE_SIZE   = 0
911   0000              
912   0000              defc __NIRVANAM_TILE_IMAGES = 48000
913   0000              defc __NIRVANAM_WIDE_IMAGES = 54000
914   0000              defc __NIRVANAM_CHAR_TABLE  = 15360
915   0000              
916   0000              ; define(`__NIRVANAM_TOTAL_ROWS', 22)
917   0000              
918   0000              
919   0000              
920   0000              
921   0000              
922   0000              
923   0000              
924   0000              
925   0000              
926   0000              PUBLIC __NIRVANAP_OPTIONS
927   0000              
928   0000              PUBLIC __NIRVANAP_OPTIONS_WIDE_DRAW
929   0000              PUBLIC __NIRVANAP_OPTIONS_WIDE_SPRITES
930   0000              
931   0000              PUBLIC __NIRVANAP_TOTAL_ROWS
932   0000              PUBLIC __NIRVANAP_HOLE
933   0000              PUBLIC _NIRVANAP_HOLE
934   0000              PUBLIC __NIRVANAP_HOLE_SIZE
935   0000              
936   0000              PUBLIC __NIRVANAP_TILE_IMAGES
937   0000              PUBLIC __NIRVANAP_WIDE_IMAGES
938   0000              PUBLIC __NIRVANAP_CHAR_TABLE
939   0000              
940   0000              
941   0000              
942   0000              
943   0000              defc __NIRVANAP_OPTIONS = 0
944   0000              
945   0000              defc __NIRVANAP_OPTIONS_WIDE_DRAW    = 0x01
946   0000              defc __NIRVANAP_OPTIONS_WIDE_SPRITES = 0x02
947   0000              
948   0000              defc __NIRVANAP_TOTAL_ROWS  = 23
949   0000              defc __NIRVANAP_HOLE        = 64262
950   0000              defc _NIRVANAP_HOLE         = 64262
951   0000              defc __NIRVANAP_HOLE_SIZE   = 0
952   0000              
953   0000              defc __NIRVANAP_TILE_IMAGES = 48000
954   0000              defc __NIRVANAP_WIDE_IMAGES = 54000
955   0000              defc __NIRVANAP_CHAR_TABLE  = 15360
956   0000              
957   0000              ; define(`__NIRVANAP_TOTAL_ROWS', 23)
958   0000              
959   0000              
960   0000              
961   0000              
962   0000              
963   0000              
964   0000              
965   0000              
966   0000              
967   0000              PUBLIC __SOUND_BIT_METHOD
968   0000              PUBLIC __SOUND_BIT_PORT
969   0000              PUBLIC __SOUND_BIT_TOGGLE
970   0000              PUBLIC __SOUND_BIT_TOGGLE_POS
971   0000              PUBLIC __SOUND_BIT_READ_MASK
972   0000              PUBLIC __SOUND_BIT_WRITE_MASK
973   0000              
974   0000              
975   0000              
976   0000              
977   0000              defc __SOUND_BIT_METHOD     =  1
978   0000              defc __SOUND_BIT_PORT       =  0xfe
979   0000              defc __SOUND_BIT_TOGGLE     =  0x10
980   0000              defc __SOUND_BIT_TOGGLE_POS =  4
981   0000              defc __SOUND_BIT_READ_MASK  =  0x17
982   0000              defc __SOUND_BIT_WRITE_MASK =  0xe8
983   0000              
984   0000              
985   0000              
986   0000              
987   0000              
988   0000              
989   0000              
990   0000              
991   0000              
992   0000              PUBLIC SP1V_DISPORIGX
993   0000              PUBLIC SP1V_DISPORIGY
994   0000              PUBLIC SP1V_DISPWIDTH
995   0000              PUBLIC SP1V_DISPHEIGHT
996   0000              
997   0000              PUBLIC SP1V_PIXELBUFFER
998   0000              PUBLIC SP1V_ATTRBUFFER
999   0000              
1000  0000              PUBLIC SP1V_TILEARRAY
1001  0000              PUBLIC SP1V_UPDATEARRAY
1002  0000              PUBLIC SP1V_ROTTBL
1003  0000              
1004  0000              PUBLIC SP1V_UPDATELISTH
1005  0000              PUBLIC SP1V_UPDATELISTT
1006  0000              
1007  0000              
1008  0000              
1009  0000              
1010  0000              defc SP1V_DISPORIGX   = 0
1011  0000              defc SP1V_DISPORIGY   = 0
1012  0000              defc SP1V_DISPWIDTH   = 32
1013  0000              defc SP1V_DISPHEIGHT  = 24
1014  0000              
1015  0000              defc SP1V_PIXELBUFFER = 0xd1f7
1016  0000              defc SP1V_ATTRBUFFER  = 0xd1ff
1017  0000              
1018  0000              defc SP1V_TILEARRAY   = 0xf000
1019  0000              defc SP1V_UPDATEARRAY = 0xd200
1020  0000              defc SP1V_ROTTBL      = 0xf000
1021  0000              
1022  0000              defc SP1V_UPDATELISTH = 0xd1ed
1023  0000              defc SP1V_UPDATELISTT = 0xd1ef
1024  0000              
1025  0000              
1026  0000              
1027  0000              
1028  0000              
1029  0000              
1030  0000              
1031  0000              
1032  0000              
1033  0000              PUBLIC __IO_ULAP_REGISTER
1034  0000              PUBLIC __IO_ULAP_DATA
1035  0000              
1036  0000              PUBLIC __ULAP_COLOR_MONO_BLACK
1037  0000              PUBLIC __ULAP_COLOR_MONO_GREY_0
1038  0000              PUBLIC __ULAP_COLOR_MONO_GREY_1
1039  0000              PUBLIC __ULAP_COLOR_MONO_GREY_2
1040  0000              PUBLIC __ULAP_COLOR_MONO_GREY_3
1041  0000              PUBLIC __ULAP_COLOR_MONO_WHITE
1042  0000              
1043  0000              PUBLIC __ULAP_COLOR_AMBER_0
1044  0000              PUBLIC __ULAP_COLOR_AMBER_1
1045  0000              PUBLIC __ULAP_COLOR_AMBER_2
1046  0000              PUBLIC __ULAP_COLOR_AMBER_3
1047  0000              PUBLIC __ULAP_COLOR_AMBER_4
1048  0000              PUBLIC __ULAP_COLOR_AMBER_5
1049  0000              PUBLIC __ULAP_COLOR_AMBER_6
1050  0000              PUBLIC __ULAP_COLOR_AMBER_7
1051  0000              
1052  0000              PUBLIC __ULAP_COLOR_GREEN_0
1053  0000              PUBLIC __ULAP_COLOR_GREEN_1
1054  0000              PUBLIC __ULAP_COLOR_GREEN_2
1055  0000              PUBLIC __ULAP_COLOR_GREEN_3
1056  0000              PUBLIC __ULAP_COLOR_GREEN_4
1057  0000              PUBLIC __ULAP_COLOR_GREEN_5
1058  0000              PUBLIC __ULAP_COLOR_GREEN_6
1059  0000              PUBLIC __ULAP_COLOR_GREEN_7
1060  0000              
1061  0000              PUBLIC __ULAP_COLOR_RB_RED
1062  0000              PUBLIC __ULAP_COLOR_RB_ORANGE
1063  0000              PUBLIC __ULAP_COLOR_RB_YELLOW
1064  0000              PUBLIC __ULAP_COLOR_RB_GREEN
1065  0000              PUBLIC __ULAP_COLOR_RB_BLUE
1066  0000              PUBLIC __ULAP_COLOR_RB_VIOLET
1067  0000              PUBLIC __ULAP_COLOR_RB_INDIGO
1068  0000              
1069  0000              PUBLIC __ULAP_COLOR_ZX_BLACK
1070  0000              PUBLIC __ULAP_COLOR_ZX_BLUE
1071  0000              PUBLIC __ULAP_COLOR_ZX_RED
1072  0000              PUBLIC __ULAP_COLOR_ZX_MAGENTA
1073  0000              PUBLIC __ULAP_COLOR_ZX_GREEN
1074  0000              PUBLIC __ULAP_COLOR_ZX_CYAN
1075  0000              PUBLIC __ULAP_COLOR_ZX_YELLOW
1076  0000              PUBLIC __ULAP_COLOR_ZX_WHITE
1077  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_BLACK
1078  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_BLUE
1079  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_RED
1080  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_MAGENTA
1081  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_GREEN
1082  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_CYAN
1083  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_YELLOW
1084  0000              PUBLIC __ULAP_COLOR_ZX_BRIGHT_WHITE
1085  0000              
1086  0000              PUBLIC __ULAP_COLOR_C64_BLACK
1087  0000              PUBLIC __ULAP_COLOR_C64_WHITE
1088  0000              PUBLIC __ULAP_COLOR_C64_RED
1089  0000              PUBLIC __ULAP_COLOR_C64_CYAN
1090  0000              PUBLIC __ULAP_COLOR_C64_VIOLET
1091  0000              PUBLIC __ULAP_COLOR_C64_GREEN
1092  0000              PUBLIC __ULAP_COLOR_C64_BLUE
1093  0000              PUBLIC __ULAP_COLOR_C64_YELLOW
1094  0000              PUBLIC __ULAP_COLOR_C64_ORANGE
1095  0000              PUBLIC __ULAP_COLOR_C64_BROWN
1096  0000              PUBLIC __ULAP_COLOR_C64_LIGHTRED
1097  0000              PUBLIC __ULAP_COLOR_C64_GREY1
1098  0000              PUBLIC __ULAP_COLOR_C64_GREY2
1099  0000              PUBLIC __ULAP_COLOR_C64_LIGHTGREEN
1100  0000              PUBLIC __ULAP_COLOR_C64_LIGHTBLUE
1101  0000              PUBLIC __ULAP_COLOR_C64_GREY3
1102  0000              
1103  0000              PUBLIC __ULAP_COLOR_G1_BLACK
1104  0000              PUBLIC __ULAP_COLOR_G1_GREY
1105  0000              PUBLIC __ULAP_COLOR_G1_SILVER
1106  0000              PUBLIC __ULAP_COLOR_G1_DARK_TEAL
1107  0000              PUBLIC __ULAP_COLOR_G1_GREEN
1108  0000              PUBLIC __ULAP_COLOR_G1_GREENYELLOW
1109  0000              PUBLIC __ULAP_COLOR_G1_MAROON
1110  0000              PUBLIC __ULAP_COLOR_G1_SIENNA
1111  0000              PUBLIC __ULAP_COLOR_G1_SANDYBROWN
1112  0000              PUBLIC __ULAP_COLOR_G1_KHAKI
1113  0000              PUBLIC __ULAP_COLOR_G1_WHITE
1114  0000              PUBLIC __ULAP_COLOR_G1_SKYBLUE
1115  0000              PUBLIC __ULAP_COLOR_G1_SLATEBLUE
1116  0000              PUBLIC __ULAP_COLOR_G1_BLUE
1117  0000              
1118  0000              PUBLIC __ULAP_COLOR_STD_DARK_BLUE
1119  0000              PUBLIC __ULAP_COLOR_STD_BRIGHT_BLUE
1120  0000              PUBLIC __ULAP_COLOR_STD_BLUE
1121  0000              PUBLIC __ULAP_COLOR_STD_CYAN
1122  0000              PUBLIC __ULAP_COLOR_STD_BRIGHT_YELLOW
1123  0000              PUBLIC __ULAP_COLOR_STD_YELLOW
1124  0000              PUBLIC __ULAP_COLOR_STD_ORANGE
1125  0000              PUBLIC __ULAP_COLOR_STD_BRIGHT_RED
1126  0000              PUBLIC __ULAP_COLOR_STD_RED
1127  0000              PUBLIC __ULAP_COLOR_STD_DARK_RED
1128  0000              PUBLIC __ULAP_COLOR_STD_MAGENTA
1129  0000              PUBLIC __ULAP_COLOR_STD_BRIGHT_GREEN
1130  0000              PUBLIC __ULAP_COLOR_STD_GREEN
1131  0000              PUBLIC __ULAP_COLOR_STD_DARK_GREEN
1132  0000              PUBLIC __ULAP_COLOR_STD_BRIGHT_GREY
1133  0000              PUBLIC __ULAP_COLOR_STD_LIGHT_GREY
1134  0000              PUBLIC __ULAP_COLOR_STD_GREY
1135  0000              PUBLIC __ULAP_COLOR_STD_WHITE
1136  0000              PUBLIC __ULAP_COLOR_STD_BLACK
1137  0000              
1138  0000              PUBLIC __ULAP_COLOR_HTML_Black
1139  0000              PUBLIC __ULAP_COLOR_HTML_Navy
1140  0000              PUBLIC __ULAP_COLOR_HTML_DarkBlue
1141  0000              PUBLIC __ULAP_COLOR_HTML_MediumBlue
1142  0000              PUBLIC __ULAP_COLOR_HTML_Blue
1143  0000              PUBLIC __ULAP_COLOR_HTML_DarkGreen
1144  0000              PUBLIC __ULAP_COLOR_HTML_Green
1145  0000              PUBLIC __ULAP_COLOR_HTML_Teal
1146  0000              PUBLIC __ULAP_COLOR_HTML_DarkCyan
1147  0000              PUBLIC __ULAP_COLOR_HTML_DeepSkyBlue
1148  0000              PUBLIC __ULAP_COLOR_HTML_DarkTurquoise
1149  0000              PUBLIC __ULAP_COLOR_HTML_MediumSpringGreen
1150  0000              PUBLIC __ULAP_COLOR_HTML_Lime
1151  0000              PUBLIC __ULAP_COLOR_HTML_SpringGreen
1152  0000              PUBLIC __ULAP_COLOR_HTML_Aqua
1153  0000              PUBLIC __ULAP_COLOR_HTML_Cyan
1154  0000              PUBLIC __ULAP_COLOR_HTML_MidnightBlue
1155  0000              PUBLIC __ULAP_COLOR_HTML_DodgerBlue
1156  0000              PUBLIC __ULAP_COLOR_HTML_LightSeaGreen
1157  0000              PUBLIC __ULAP_COLOR_HTML_ForestGreen
1158  0000              PUBLIC __ULAP_COLOR_HTML_SeaGreen
1159  0000              PUBLIC __ULAP_COLOR_HTML_DarkSlateGray
1160  0000              PUBLIC __ULAP_COLOR_HTML_DarkSlateGrey
1161  0000              PUBLIC __ULAP_COLOR_HTML_LimeGreen
1162  0000              PUBLIC __ULAP_COLOR_HTML_MediumSeaGreen
1163  0000              PUBLIC __ULAP_COLOR_HTML_Turquoise
1164  0000              PUBLIC __ULAP_COLOR_HTML_RoyalBlue
1165  0000              PUBLIC __ULAP_COLOR_HTML_SteelBlue
1166  0000              PUBLIC __ULAP_COLOR_HTML_DarkSlateBlue
1167  0000              PUBLIC __ULAP_COLOR_HTML_MediumTurquoise
1168  0000              PUBLIC __ULAP_COLOR_HTML_Indigo
1169  0000              PUBLIC __ULAP_COLOR_HTML_DarkOliveGreen
1170  0000              PUBLIC __ULAP_COLOR_HTML_CadetBlue
1171  0000              PUBLIC __ULAP_COLOR_HTML_CornflowerBlue
1172  0000              PUBLIC __ULAP_COLOR_HTML_RebeccaPurple
1173  0000              PUBLIC __ULAP_COLOR_HTML_MediumAquaMarine
1174  0000              PUBLIC __ULAP_COLOR_HTML_DimGray
1175  0000              PUBLIC __ULAP_COLOR_HTML_DimGrey
1176  0000              PUBLIC __ULAP_COLOR_HTML_SlateBlue
1177  0000              PUBLIC __ULAP_COLOR_HTML_OliveDrab
1178  0000              PUBLIC __ULAP_COLOR_HTML_SlateGray
1179  0000              PUBLIC __ULAP_COLOR_HTML_SlateGrey
1180  0000              PUBLIC __ULAP_COLOR_HTML_LightSlateGray
1181  0000              PUBLIC __ULAP_COLOR_HTML_LightSlateGrey
1182  0000              PUBLIC __ULAP_COLOR_HTML_MediumSlateBlue
1183  0000              PUBLIC __ULAP_COLOR_HTML_LawnGreen
1184  0000              PUBLIC __ULAP_COLOR_HTML_Chartreuse
1185  0000              PUBLIC __ULAP_COLOR_HTML_Aquamarine
1186  0000              PUBLIC __ULAP_COLOR_HTML_Maroon
1187  0000              PUBLIC __ULAP_COLOR_HTML_Purple
1188  0000              PUBLIC __ULAP_COLOR_HTML_Olive
1189  0000              PUBLIC __ULAP_COLOR_HTML_Gray
1190  0000              PUBLIC __ULAP_COLOR_HTML_Grey
1191  0000              PUBLIC __ULAP_COLOR_HTML_SkyBlue
1192  0000              PUBLIC __ULAP_COLOR_HTML_LightSkyBlue
1193  0000              PUBLIC __ULAP_COLOR_HTML_BlueViolet
1194  0000              PUBLIC __ULAP_COLOR_HTML_DarkRed
1195  0000              PUBLIC __ULAP_COLOR_HTML_DarkMagenta
1196  0000              PUBLIC __ULAP_COLOR_HTML_SaddleBrown
1197  0000              PUBLIC __ULAP_COLOR_HTML_DarkSeaGreen
1198  0000              PUBLIC __ULAP_COLOR_HTML_LightGreen
1199  0000              PUBLIC __ULAP_COLOR_HTML_MediumPurple
1200  0000              PUBLIC __ULAP_COLOR_HTML_DarkViolet
1201  0000              PUBLIC __ULAP_COLOR_HTML_PaleGreen
1202  0000              PUBLIC __ULAP_COLOR_HTML_DarkOrchid
1203  0000              PUBLIC __ULAP_COLOR_HTML_YellowGreen
1204  0000              PUBLIC __ULAP_COLOR_HTML_Sienna
1205  0000              PUBLIC __ULAP_COLOR_HTML_Brown
1206  0000              PUBLIC __ULAP_COLOR_HTML_DarkGray
1207  0000              PUBLIC __ULAP_COLOR_HTML_DarkGrey
1208  0000              PUBLIC __ULAP_COLOR_HTML_LightBlue
1209  0000              PUBLIC __ULAP_COLOR_HTML_GreenYellow
1210  0000              PUBLIC __ULAP_COLOR_HTML_PaleTurquoise
1211  0000              PUBLIC __ULAP_COLOR_HTML_LightSteelBlue
1212  0000              PUBLIC __ULAP_COLOR_HTML_PowderBlue
1213  0000              PUBLIC __ULAP_COLOR_HTML_FireBrick
1214  0000              PUBLIC __ULAP_COLOR_HTML_DarkGoldenRod
1215  0000              PUBLIC __ULAP_COLOR_HTML_MediumOrchid
1216  0000              PUBLIC __ULAP_COLOR_HTML_RosyBrown
1217  0000              PUBLIC __ULAP_COLOR_HTML_DarkKhaki
1218  0000              PUBLIC __ULAP_COLOR_HTML_Silver
1219  0000              PUBLIC __ULAP_COLOR_HTML_MediumVioletRed
1220  0000              PUBLIC __ULAP_COLOR_HTML_IndianRed
1221  0000              PUBLIC __ULAP_COLOR_HTML_Peru
1222  0000              PUBLIC __ULAP_COLOR_HTML_Chocolate
1223  0000              PUBLIC __ULAP_COLOR_HTML_Tan
1224  0000              PUBLIC __ULAP_COLOR_HTML_LightGray
1225  0000              PUBLIC __ULAP_COLOR_HTML_LightGrey
1226  0000              PUBLIC __ULAP_COLOR_HTML_Thistle
1227  0000              PUBLIC __ULAP_COLOR_HTML_Orchid
1228  0000              PUBLIC __ULAP_COLOR_HTML_GoldenRod
1229  0000              PUBLIC __ULAP_COLOR_HTML_PaleVioletRed
1230  0000              PUBLIC __ULAP_COLOR_HTML_Crimson
1231  0000              PUBLIC __ULAP_COLOR_HTML_Gainsboro
1232  0000              PUBLIC __ULAP_COLOR_HTML_Plum
1233  0000              PUBLIC __ULAP_COLOR_HTML_BurlyWood
1234  0000              PUBLIC __ULAP_COLOR_HTML_LightCyan
1235  0000              PUBLIC __ULAP_COLOR_HTML_Lavender
1236  0000              PUBLIC __ULAP_COLOR_HTML_DarkSalmon
1237  0000              PUBLIC __ULAP_COLOR_HTML_Violet
1238  0000              PUBLIC __ULAP_COLOR_HTML_PaleGoldenRod
1239  0000              PUBLIC __ULAP_COLOR_HTML_LightCoral
1240  0000              PUBLIC __ULAP_COLOR_HTML_Khaki
1241  0000              PUBLIC __ULAP_COLOR_HTML_AliceBlue
1242  0000              PUBLIC __ULAP_COLOR_HTML_HoneyDew
1243  0000              PUBLIC __ULAP_COLOR_HTML_Azure
1244  0000              PUBLIC __ULAP_COLOR_HTML_SandyBrown
1245  0000              PUBLIC __ULAP_COLOR_HTML_Wheat
1246  0000              PUBLIC __ULAP_COLOR_HTML_Beige
1247  0000              PUBLIC __ULAP_COLOR_HTML_WhiteSmoke
1248  0000              PUBLIC __ULAP_COLOR_HTML_MintCream
1249  0000              PUBLIC __ULAP_COLOR_HTML_GhostWhite
1250  0000              PUBLIC __ULAP_COLOR_HTML_Salmon
1251  0000              PUBLIC __ULAP_COLOR_HTML_AntiqueWhite
1252  0000              PUBLIC __ULAP_COLOR_HTML_Linen
1253  0000              PUBLIC __ULAP_COLOR_HTML_LightGoldenRodYellow
1254  0000              PUBLIC __ULAP_COLOR_HTML_OldLace
1255  0000              PUBLIC __ULAP_COLOR_HTML_Red
1256  0000              PUBLIC __ULAP_COLOR_HTML_Fuchsia
1257  0000              PUBLIC __ULAP_COLOR_HTML_Magenta
1258  0000              PUBLIC __ULAP_COLOR_HTML_DeepPink
1259  0000              PUBLIC __ULAP_COLOR_HTML_OrangeRed
1260  0000              PUBLIC __ULAP_COLOR_HTML_Tomato
1261  0000              PUBLIC __ULAP_COLOR_HTML_HotPink
1262  0000              PUBLIC __ULAP_COLOR_HTML_Coral
1263  0000              PUBLIC __ULAP_COLOR_HTML_DarkOrange
1264  0000              PUBLIC __ULAP_COLOR_HTML_LightSalmon
1265  0000              PUBLIC __ULAP_COLOR_HTML_Orange
1266  0000              PUBLIC __ULAP_COLOR_HTML_LightPink
1267  0000              PUBLIC __ULAP_COLOR_HTML_Pink
1268  0000              PUBLIC __ULAP_COLOR_HTML_Gold
1269  0000              PUBLIC __ULAP_COLOR_HTML_PeachPuff
1270  0000              PUBLIC __ULAP_COLOR_HTML_NavajoWhite
1271  0000              PUBLIC __ULAP_COLOR_HTML_Moccasin
1272  0000              PUBLIC __ULAP_COLOR_HTML_Bisque
1273  0000              PUBLIC __ULAP_COLOR_HTML_MistyRose
1274  0000              PUBLIC __ULAP_COLOR_HTML_BlanchedAlmond
1275  0000              PUBLIC __ULAP_COLOR_HTML_PapayaWhip
1276  0000              PUBLIC __ULAP_COLOR_HTML_LavenderBlush
1277  0000              PUBLIC __ULAP_COLOR_HTML_SeaShell
1278  0000              PUBLIC __ULAP_COLOR_HTML_Cornsilk
1279  0000              PUBLIC __ULAP_COLOR_HTML_LemonChiffon
1280  0000              PUBLIC __ULAP_COLOR_HTML_FloralWhite
1281  0000              PUBLIC __ULAP_COLOR_HTML_Snow
1282  0000              PUBLIC __ULAP_COLOR_HTML_Yellow
1283  0000              PUBLIC __ULAP_COLOR_HTML_LightYellow
1284  0000              PUBLIC __ULAP_COLOR_HTML_Ivory
1285  0000              PUBLIC __ULAP_COLOR_HTML_White
1286  0000              
1287  0000              
1288  0000              
1289  0000              defc __IO_ULAP_REGISTER = 0xbf3b
1290  0000              defc __IO_ULAP_DATA     = 0xff3b
1291  0000              
1292  0000              defc __ULAP_COLOR_MONO_BLACK = 0x00
1293  0000              defc __ULAP_COLOR_MONO_GREY_0 = 0x00
1294  0000              defc __ULAP_COLOR_MONO_GREY_1 = 0x49
1295  0000              defc __ULAP_COLOR_MONO_GREY_2 = 0x92
1296  0000              defc __ULAP_COLOR_MONO_GREY_3 = 0xff
1297  0000              defc __ULAP_COLOR_MONO_WHITE = 0xff
1298  0000              
1299  0000              defc __ULAP_COLOR_AMBER_0 = 0x00
1300  0000              defc __ULAP_COLOR_AMBER_1 = 0x04
1301  0000              defc __ULAP_COLOR_AMBER_2 = 0x28
1302  0000              defc __ULAP_COLOR_AMBER_3 = 0x2c
1303  0000              defc __ULAP_COLOR_AMBER_4 = 0x50
1304  0000              defc __ULAP_COLOR_AMBER_5 = 0x54
1305  0000              defc __ULAP_COLOR_AMBER_6 = 0x78
1306  0000              defc __ULAP_COLOR_AMBER_7 = 0x7c
1307  0000              
1308  0000              defc __ULAP_COLOR_GREEN_0 = 0x00
1309  0000              defc __ULAP_COLOR_GREEN_1 = 0x20
1310  0000              defc __ULAP_COLOR_GREEN_2 = 0x40
1311  0000              defc __ULAP_COLOR_GREEN_3 = 0x60
1312  0000              defc __ULAP_COLOR_GREEN_4 = 0x80
1313  0000              defc __ULAP_COLOR_GREEN_5 = 0xa0
1314  0000              defc __ULAP_COLOR_GREEN_6 = 0xc0
1315  0000              defc __ULAP_COLOR_GREEN_7 = 0xe0
1316  0000              
1317  0000              defc __ULAP_COLOR_RB_RED = 0x1c
1318  0000              defc __ULAP_COLOR_RB_ORANGE = 0x7c
1319  0000              defc __ULAP_COLOR_RB_YELLOW = 0xfc
1320  0000              defc __ULAP_COLOR_RB_GREEN = 0xe0
1321  0000              defc __ULAP_COLOR_RB_BLUE = 0x03
1322  0000              defc __ULAP_COLOR_RB_VIOLET = 0x0a
1323  0000              defc __ULAP_COLOR_RB_INDIGO = 0x13
1324  0000              
1325  0000              defc __ULAP_COLOR_ZX_BLACK = 0x00
1326  0000              defc __ULAP_COLOR_ZX_BLUE = 0x02
1327  0000              defc __ULAP_COLOR_ZX_RED = 0x18
1328  0000              defc __ULAP_COLOR_ZX_MAGENTA = 0x1b
1329  0000              defc __ULAP_COLOR_ZX_GREEN = 0xc0
1330  0000              defc __ULAP_COLOR_ZX_CYAN = 0xc3
1331  0000              defc __ULAP_COLOR_ZX_YELLOW = 0xd8
1332  0000              defc __ULAP_COLOR_ZX_WHITE = 0xdb
1333  0000              defc __ULAP_COLOR_ZX_BRIGHT_BLACK = 0x00
1334  0000              defc __ULAP_COLOR_ZX_BRIGHT_BLUE = 0x03
1335  0000              defc __ULAP_COLOR_ZX_BRIGHT_RED = 0x1c
1336  0000              defc __ULAP_COLOR_ZX_BRIGHT_MAGENTA = 0x1f
1337  0000              defc __ULAP_COLOR_ZX_BRIGHT_GREEN = 0xe0
1338  0000              defc __ULAP_COLOR_ZX_BRIGHT_CYAN = 0xe3
1339  0000              defc __ULAP_COLOR_ZX_BRIGHT_YELLOW = 0xfc
1340  0000              defc __ULAP_COLOR_ZX_BRIGHT_WHITE = 0xff
1341  0000              
1342  0000              defc __ULAP_COLOR_C64_BLACK = 0x00
1343  0000              defc __ULAP_COLOR_C64_WHITE = 0xff
1344  0000              defc __ULAP_COLOR_C64_RED = 0x30
1345  0000              defc __ULAP_COLOR_C64_CYAN = 0xaf
1346  0000              defc __ULAP_COLOR_C64_VIOLET = 0x52
1347  0000              defc __ULAP_COLOR_C64_GREEN = 0xad
1348  0000              defc __ULAP_COLOR_C64_BLUE = 0x26
1349  0000              defc __ULAP_COLOR_C64_YELLOW = 0xd9
1350  0000              defc __ULAP_COLOR_C64_ORANGE = 0x50
1351  0000              defc __ULAP_COLOR_C64_BROWN = 0x48
1352  0000              defc __ULAP_COLOR_C64_LIGHTRED = 0x75
1353  0000              defc __ULAP_COLOR_C64_GREY1 = 0x49
1354  0000              defc __ULAP_COLOR_C64_GREY2 = 0x92
1355  0000              defc __ULAP_COLOR_C64_LIGHTGREEN = 0xf6
1356  0000              defc __ULAP_COLOR_C64_LIGHTBLUE = 0x6f
1357  0000              defc __ULAP_COLOR_C64_GREY3 = 0xb6
1358  0000              
1359  0000              defc __ULAP_COLOR_G1_BLACK = 0x00
1360  0000              defc __ULAP_COLOR_G1_GREY = 0x6d
1361  0000              defc __ULAP_COLOR_G1_SILVER = 0xb6
1362  0000              defc __ULAP_COLOR_G1_DARK_TEAL = 0x62
1363  0000              defc __ULAP_COLOR_G1_GREEN = 0xa0
1364  0000              defc __ULAP_COLOR_G1_GREENYELLOW = 0xf0
1365  0000              defc __ULAP_COLOR_G1_MAROON = 0x0c
1366  0000              defc __ULAP_COLOR_G1_SIENNA = 0x54
1367  0000              defc __ULAP_COLOR_G1_SANDYBROWN = 0x9c
1368  0000              defc __ULAP_COLOR_G1_KHAKI = 0xfd
1369  0000              defc __ULAP_COLOR_G1_WHITE = 0xff
1370  0000              defc __ULAP_COLOR_G1_SKYBLUE = 0xd3
1371  0000              defc __ULAP_COLOR_G1_SLATEBLUE = 0x6b
1372  0000              defc __ULAP_COLOR_G1_BLUE = 0x02
1373  0000              
1374  0000              defc __ULAP_COLOR_STD_DARK_BLUE = 0x02
1375  0000              defc __ULAP_COLOR_STD_BRIGHT_BLUE = 0xdb
1376  0000              defc __ULAP_COLOR_STD_BLUE = 0x03
1377  0000              defc __ULAP_COLOR_STD_CYAN = 0xe3
1378  0000              defc __ULAP_COLOR_STD_BRIGHT_YELLOW = 0xdd
1379  0000              defc __ULAP_COLOR_STD_YELLOW = 0xfc
1380  0000              defc __ULAP_COLOR_STD_ORANGE = 0x9d
1381  0000              defc __ULAP_COLOR_STD_BRIGHT_RED = 0x5d
1382  0000              defc __ULAP_COLOR_STD_RED = 0x1c
1383  0000              defc __ULAP_COLOR_STD_DARK_RED = 0x10
1384  0000              defc __ULAP_COLOR_STD_MAGENTA = 0x1f
1385  0000              defc __ULAP_COLOR_STD_BRIGHT_GREEN = 0xf2
1386  0000              defc __ULAP_COLOR_STD_GREEN = 0xe0
1387  0000              defc __ULAP_COLOR_STD_DARK_GREEN = 0x80
1388  0000              defc __ULAP_COLOR_STD_BRIGHT_GREY = 0x49
1389  0000              defc __ULAP_COLOR_STD_LIGHT_GREY = 0x6d
1390  0000              defc __ULAP_COLOR_STD_GREY = 0x24
1391  0000              defc __ULAP_COLOR_STD_WHITE = 0xff
1392  0000              defc __ULAP_COLOR_STD_BLACK = 0x00
1393  0000              
1394  0000              defc __ULAP_COLOR_HTML_Black = 0
1395  0000              defc __ULAP_COLOR_HTML_Navy = 2
1396  0000              defc __ULAP_COLOR_HTML_DarkBlue = 2
1397  0000              defc __ULAP_COLOR_HTML_MediumBlue = 3
1398  0000              defc __ULAP_COLOR_HTML_Blue = 3
1399  0000              defc __ULAP_COLOR_HTML_DarkGreen = 96
1400  0000              defc __ULAP_COLOR_HTML_Green = 128
1401  0000              defc __ULAP_COLOR_HTML_Teal = 130
1402  0000              defc __ULAP_COLOR_HTML_DarkCyan = 130
1403  0000              defc __ULAP_COLOR_HTML_DeepSkyBlue = 163
1404  0000              defc __ULAP_COLOR_HTML_DarkTurquoise = 195
1405  0000              defc __ULAP_COLOR_HTML_MediumSpringGreen = 226
1406  0000              defc __ULAP_COLOR_HTML_Lime = 224
1407  0000              defc __ULAP_COLOR_HTML_SpringGreen = 225
1408  0000              defc __ULAP_COLOR_HTML_Aqua = 227
1409  0000              defc __ULAP_COLOR_HTML_Cyan = 227
1410  0000              defc __ULAP_COLOR_HTML_MidnightBlue = 1
1411  0000              defc __ULAP_COLOR_HTML_DodgerBlue = 131
1412  0000              defc __ULAP_COLOR_HTML_LightSeaGreen = 166
1413  0000              defc __ULAP_COLOR_HTML_ForestGreen = 132
1414  0000              defc __ULAP_COLOR_HTML_SeaGreen = 133
1415  0000              defc __ULAP_COLOR_HTML_DarkSlateGray = 69
1416  0000              defc __ULAP_COLOR_HTML_DarkSlateGrey = 69
1417  0000              defc __ULAP_COLOR_HTML_LimeGreen = 196
1418  0000              defc __ULAP_COLOR_HTML_MediumSeaGreen = 165
1419  0000              defc __ULAP_COLOR_HTML_Turquoise = 235
1420  0000              defc __ULAP_COLOR_HTML_RoyalBlue = 107
1421  0000              defc __ULAP_COLOR_HTML_SteelBlue = 138
1422  0000              defc __ULAP_COLOR_HTML_DarkSlateBlue = 42
1423  0000              defc __ULAP_COLOR_HTML_MediumTurquoise = 203
1424  0000              defc __ULAP_COLOR_HTML_Indigo = 10
1425  0000              defc __ULAP_COLOR_HTML_DarkOliveGreen = 104
1426  0000              defc __ULAP_COLOR_HTML_CadetBlue = 138
1427  0000              defc __ULAP_COLOR_HTML_CornflowerBlue = 143
1428  0000              defc __ULAP_COLOR_HTML_RebeccaPurple = 46
1429  0000              defc __ULAP_COLOR_HTML_MediumAquaMarine = 206
1430  0000              defc __ULAP_COLOR_HTML_DimGray = 109
1431  0000              defc __ULAP_COLOR_HTML_DimGrey = 109
1432  0000              defc __ULAP_COLOR_HTML_SlateBlue = 79
1433  0000              defc __ULAP_COLOR_HTML_OliveDrab = 140
1434  0000              defc __ULAP_COLOR_HTML_SlateGray = 142
1435  0000              defc __ULAP_COLOR_HTML_SlateGrey = 142
1436  0000              defc __ULAP_COLOR_HTML_LightSlateGray = 142
1437  0000              defc __ULAP_COLOR_HTML_LightSlateGrey = 142
1438  0000              defc __ULAP_COLOR_HTML_MediumSlateBlue = 111
1439  0000              defc __ULAP_COLOR_HTML_LawnGreen = 236
1440  0000              defc __ULAP_COLOR_HTML_Chartreuse = 236
1441  0000              defc __ULAP_COLOR_HTML_Aquamarine = 239
1442  0000              defc __ULAP_COLOR_HTML_Maroon = 16
1443  0000              defc __ULAP_COLOR_HTML_Purple = 18
1444  0000              defc __ULAP_COLOR_HTML_Olive = 144
1445  0000              defc __ULAP_COLOR_HTML_Gray = 146
1446  0000              defc __ULAP_COLOR_HTML_Grey = 146
1447  0000              defc __ULAP_COLOR_HTML_SkyBlue = 211
1448  0000              defc __ULAP_COLOR_HTML_LightSkyBlue = 211
1449  0000              defc __ULAP_COLOR_HTML_BlueViolet = 51
1450  0000              defc __ULAP_COLOR_HTML_DarkRed = 16
1451  0000              defc __ULAP_COLOR_HTML_DarkMagenta = 18
1452  0000              defc __ULAP_COLOR_HTML_SaddleBrown = 80
1453  0000              defc __ULAP_COLOR_HTML_DarkSeaGreen = 178
1454  0000              defc __ULAP_COLOR_HTML_LightGreen = 242
1455  0000              defc __ULAP_COLOR_HTML_MediumPurple = 115
1456  0000              defc __ULAP_COLOR_HTML_DarkViolet = 19
1457  0000              defc __ULAP_COLOR_HTML_PaleGreen = 242
1458  0000              defc __ULAP_COLOR_HTML_DarkOrchid = 51
1459  0000              defc __ULAP_COLOR_HTML_YellowGreen = 208
1460  0000              defc __ULAP_COLOR_HTML_Sienna = 84
1461  0000              defc __ULAP_COLOR_HTML_Brown = 52
1462  0000              defc __ULAP_COLOR_HTML_DarkGray = 182
1463  0000              defc __ULAP_COLOR_HTML_DarkGrey = 182
1464  0000              defc __ULAP_COLOR_HTML_LightBlue = 215
1465  0000              defc __ULAP_COLOR_HTML_GreenYellow = 244
1466  0000              defc __ULAP_COLOR_HTML_PaleTurquoise = 247
1467  0000              defc __ULAP_COLOR_HTML_LightSteelBlue = 215
1468  0000              defc __ULAP_COLOR_HTML_PowderBlue = 247
1469  0000              defc __ULAP_COLOR_HTML_FireBrick = 52
1470  0000              defc __ULAP_COLOR_HTML_DarkGoldenRod = 148
1471  0000              defc __ULAP_COLOR_HTML_MediumOrchid = 87
1472  0000              defc __ULAP_COLOR_HTML_RosyBrown = 150
1473  0000              defc __ULAP_COLOR_HTML_DarkKhaki = 181
1474  0000              defc __ULAP_COLOR_HTML_Silver = 219
1475  0000              defc __ULAP_COLOR_HTML_MediumVioletRed = 26
1476  0000              defc __ULAP_COLOR_HTML_IndianRed = 89
1477  0000              defc __ULAP_COLOR_HTML_Peru = 152
1478  0000              defc __ULAP_COLOR_HTML_Chocolate = 120
1479  0000              defc __ULAP_COLOR_HTML_Tan = 186
1480  0000              defc __ULAP_COLOR_HTML_LightGray = 219
1481  0000              defc __ULAP_COLOR_HTML_LightGrey = 219
1482  0000              defc __ULAP_COLOR_HTML_Thistle = 187
1483  0000              defc __ULAP_COLOR_HTML_Orchid = 123
1484  0000              defc __ULAP_COLOR_HTML_GoldenRod = 184
1485  0000              defc __ULAP_COLOR_HTML_PaleVioletRed = 122
1486  0000              defc __ULAP_COLOR_HTML_Crimson = 24
1487  0000              defc __ULAP_COLOR_HTML_Gainsboro = 219
1488  0000              defc __ULAP_COLOR_HTML_Plum = 187
1489  0000              defc __ULAP_COLOR_HTML_BurlyWood = 186
1490  0000              defc __ULAP_COLOR_HTML_LightCyan = 255
1491  0000              defc __ULAP_COLOR_HTML_Lavender = 255
1492  0000              defc __ULAP_COLOR_HTML_DarkSalmon = 157
1493  0000              defc __ULAP_COLOR_HTML_Violet = 159
1494  0000              defc __ULAP_COLOR_HTML_PaleGoldenRod = 254
1495  0000              defc __ULAP_COLOR_HTML_LightCoral = 158
1496  0000              defc __ULAP_COLOR_HTML_Khaki = 254
1497  0000              defc __ULAP_COLOR_HTML_AliceBlue = 255
1498  0000              defc __ULAP_COLOR_HTML_HoneyDew = 255
1499  0000              defc __ULAP_COLOR_HTML_Azure = 255
1500  0000              defc __ULAP_COLOR_HTML_SandyBrown = 189
1501  0000              defc __ULAP_COLOR_HTML_Wheat = 222
1502  0000              defc __ULAP_COLOR_HTML_Beige = 255
1503  0000              defc __ULAP_COLOR_HTML_WhiteSmoke = 255
1504  0000              defc __ULAP_COLOR_HTML_MintCream = 255
1505  0000              defc __ULAP_COLOR_HTML_GhostWhite = 255
1506  0000              defc __ULAP_COLOR_HTML_Salmon = 157
1507  0000              defc __ULAP_COLOR_HTML_AntiqueWhite = 255
1508  0000              defc __ULAP_COLOR_HTML_Linen = 255
1509  0000              defc __ULAP_COLOR_HTML_LightGoldenRodYellow = 255
1510  0000              defc __ULAP_COLOR_HTML_OldLace = 255
1511  0000              defc __ULAP_COLOR_HTML_Red = 28
1512  0000              defc __ULAP_COLOR_HTML_Fuchsia = 31
1513  0000              defc __ULAP_COLOR_HTML_Magenta = 31
1514  0000              defc __ULAP_COLOR_HTML_DeepPink = 30
1515  0000              defc __ULAP_COLOR_HTML_OrangeRed = 92
1516  0000              defc __ULAP_COLOR_HTML_Tomato = 125
1517  0000              defc __ULAP_COLOR_HTML_HotPink = 126
1518  0000              defc __ULAP_COLOR_HTML_Coral = 125
1519  0000              defc __ULAP_COLOR_HTML_DarkOrange = 156
1520  0000              defc __ULAP_COLOR_HTML_LightSalmon = 189
1521  0000              defc __ULAP_COLOR_HTML_Orange = 188
1522  0000              defc __ULAP_COLOR_HTML_LightPink = 191
1523  0000              defc __ULAP_COLOR_HTML_Pink = 223
1524  0000              defc __ULAP_COLOR_HTML_Gold = 220
1525  0000              defc __ULAP_COLOR_HTML_PeachPuff = 222
1526  0000              defc __ULAP_COLOR_HTML_NavajoWhite = 222
1527  0000              defc __ULAP_COLOR_HTML_Moccasin = 254
1528  0000              defc __ULAP_COLOR_HTML_Bisque = 255
1529  0000              defc __ULAP_COLOR_HTML_MistyRose = 255
1530  0000              defc __ULAP_COLOR_HTML_BlanchedAlmond = 255
1531  0000              defc __ULAP_COLOR_HTML_PapayaWhip = 255
1532  0000              defc __ULAP_COLOR_HTML_LavenderBlush = 255
1533  0000              defc __ULAP_COLOR_HTML_SeaShell = 255
1534  0000              defc __ULAP_COLOR_HTML_Cornsilk = 255
1535  0000              defc __ULAP_COLOR_HTML_LemonChiffon = 255
1536  0000              defc __ULAP_COLOR_HTML_FloralWhite = 255
1537  0000              defc __ULAP_COLOR_HTML_Snow = 255
1538  0000              defc __ULAP_COLOR_HTML_Yellow = 252
1539  0000              defc __ULAP_COLOR_HTML_LightYellow = 255
1540  0000              defc __ULAP_COLOR_HTML_Ivory = 255
1541  0000              defc __ULAP_COLOR_HTML_White = 255
1542  0000              
1543  0000              
1544  0000              
1545  0000              
1546  0000              
1547  0000              
1548  0000              
1549  0000              
1550  0000              
1551  0000              
1552  0000              ENDIF
1553  0000              
1554  0000              
62    0000              
63    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
64    0000              ;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
65    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
66    0000              
67    0000              include "../crt_defaults.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000                 ; crt configuration
7     0000              
8     0000                 defc DEF__crt_org_code              = 0       ;; org of code section
9     0000                 defc DEF__crt_org_data              = 0       ;; org of data section (0 or -1 means follow code, -1 means generate separate binary)
10    0000                 defc DEF__crt_org_bss               = 0       ;; org of bss section (0 or -1 means follow data, -1 means generate separate binary)
11    0000              
12    0000                 defc DEF__crt_model                 = 0       ;; 0 = ram model, 1 = rom model, 2 = compressed rom model
13    0000                 defc DEF__crt_enforce_snames        = 3       ;; bit 0 set = enforce BSS name, bit 1 set = enforce DATA name
14    0000              
15    0000                 defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
16    0000                 defc DEF__crt_stack_size            = 512     ;; minimum size reserved for stack when automatically allocating memory for the malloc heap
17    0000              
18    0000                 defc DEF__crt_initialize_bss        = 0       ;; generate code to initialize bss section at startup
19    0000              
20    0000                 defc DEF__crt_include_preamble      = 0       ;; if non-zero, user supplies code in file "crt_preamble.asm" that is inserted at the start of the binary
21    0000              
22    0000                 defc DEF__crt_org_vector_table      = 0       ;; if negative and Z88DK supplies page zero code, creates a section "code_vector" aligned to a page boundary to hold int vectors
23    0000                 defc DEF__crt_interrupt_mode        = -1      ;; if 0-2 crt inserts appropriate im x instruction
24    0000              
25    0000                 defc DEF__crt_enable_commandline    = 2       ;; generate argc and argv from command line (targets without command line will get argc=1, argv[0]="", argv[1]=NULL)
26    0000                 defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
27    0000                 defc DEF__crt_enable_close          = 1       ;; if non-zero, close files on exit
28    0000              
29    0000                 defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
30    0000                 defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
31    0000              
32    0000                 defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
33    0000                 defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
34    0000                 defc DEF__crt_enable_trap           = 0       ;; if non-zero and in some crts with code org = 0 and Z180 target, a jump to user code to service traps is inserted
35    0000              
36    0000                 ; clib defaults
37    0000              
38    0000                 defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
39    0000                 defc DEF__clib_quickexit_stack_size = 32      ;; max number of functions that can be registered with at_quickexit()
40    0000              
41    0000                 defc DEF__clib_malloc_heap_size     = -1      ;; size of malloc heap (0 = do not create a heap, -1 = automatically place heap between end of bss section and bottom of stack)
42    0000                 defc DEF__clib_stdio_heap_size      = 256     ;; size of stdio heap (0 = do not allocate bytes for opening of files)
43    0000              
44    0000                 defc DEF__clib_balloc_table_size    = 0       ;; number of queues created for balloc block memory allocator
45    0000              
46    0000                 defc DEF__clib_fopen_max            = 8       ;; max number of FILE*
47    0000                 defc DEF__clib_open_max             = 8       ;; max number of open files
48    0000              
49    0000              ;; end crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
50    0000              
68    0000              include "crt_config.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __CRTCFG = -1
7     0000              
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000                 ;; user supplied crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000                 INCLUDE "crt_cfg.inc"
13    0000              
14    0000              ENDIF
15    0000              
16    0000              IF __CRTCFG = 0
17    0000              
18    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000                 ;; zx48 ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
22    0000                 defc TAR__crt_org_code              = 32768
23    0000                 defc TAR__crt_org_data              = 0
24    0000                 defc TAR__crt_org_bss               = 0
25    0000              
26    0000                 defc TAR__crt_model                 = 0
27    0000              
28    0000                 defc TAR__register_sp               = 65368    ;; under UDGs
29    0000                 defc TAR__crt_stack_size            = 512
30    0000              
31    0000                 defc TAR__crt_initialize_bss        = 0
32    0000              
33    0000                 defc TAR__crt_include_preamble      = 0
34    0000              
35    0000                 defc TAR__crt_org_vector_table      = 0
36    0000                 defc TAR__crt_interrupt_mode        = -1
37    0000              
38    0000                 defc TAR__crt_enable_commandline    = 0
39    0000                 defc TAR__crt_enable_restart        = 0
40    0000                 defc TAR__crt_enable_close          = 1
41    0000              
42    0000                 defc TAR__crt_enable_eidi           = 0x01     ;; disable interrupts at start
43    0000                 defc TAR__crt_on_exit               = 0x30002  ;; return to basic
44    0000              
45    0000                 defc TAR__crt_enable_rst            = 0
46    0000                 defc TAR__crt_enable_nmi            = 0
47    0000              
48    0000                 ; clib defaults
49    0000              
50    0000                 defc TAR__clib_exit_stack_size      = 0
51    0000                 defc TAR__clib_quickexit_stack_size = 0
52    0000              
53    0000                 defc TAR__clib_malloc_heap_size     = -1
54    0000                 defc TAR__clib_stdio_heap_size      = 256
55    0000              
56    0000                 defc TAR__clib_balloc_table_size    = 0
57    0000              
58    0000                 defc TAR__clib_fopen_max            = 0
59    0000                 defc TAR__clib_open_max             = 0
60    0000              
61    0000              ENDIF
62    0000              
63    0000              IF __CRTCFG = 1
64    0000              
65    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
66    0000                 ;; if2 cartridge ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
67    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
68    0000              
69    0000                 defc TAR__crt_org_code              = 0
70    0000                 defc TAR__crt_org_data              = 32768
71    0000                 defc TAR__crt_org_bss               = -1
72    0000              
73    0000                 defc TAR__crt_model                 = 2
74    0000              
75    0000                 defc TAR__register_sp               = 0
76    0000                 defc TAR__crt_stack_size            = 512
77    0000              
78    0000                 defc TAR__crt_initialize_bss        = 0
79    0000              
80    0000                 defc TAR__crt_include_preamble      = 0
81    0000              
82    0000                 defc TAR__crt_org_vector_table      = 0
83    0000                 defc TAR__crt_interrupt_mode        = -1
84    0000              
85    0000                 defc TAR__crt_enable_commandline    = 0
86    0000                 defc TAR__crt_enable_restart        = 1
87    0000                 defc TAR__crt_enable_close          = 1
88    0000              
89    0000                 defc TAR__crt_enable_eidi           = 0x11
90    0000                 defc TAR__crt_on_exit               = 0x10001
91    0000              
92    0000                 defc TAR__crt_enable_rst            = 0
93    0000                 defc TAR__crt_enable_nmi            = 0
94    0000              
95    0000                 ; clib defaults
96    0000              
97    0000                 defc TAR__clib_exit_stack_size      = 0
98    0000                 defc TAR__clib_quickexit_stack_size = 0
99    0000              
100   0000                 defc TAR__clib_malloc_heap_size     = -1
101   0000                 defc TAR__clib_stdio_heap_size      = 256
102   0000              
103   0000                 defc TAR__clib_balloc_table_size    = 0
104   0000              
105   0000                 defc TAR__clib_fopen_max            = 0
106   0000                 defc TAR__clib_open_max             = 0
107   0000              
108   0000              ENDIF
109   0000              
110   0000              ;; end crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
111   0000              
69    0000              
70    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
71    0000              ;; crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
72    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
73    0000              
74    0000              
75    0000                 IFDEF CRT_ORG_CODE
76    0000              
77    0000                    defc __crt_org_code = CRT_ORG_CODE
78    0000              
79    0000                 ELSE
80    0000              
81    0000                    IFDEF TAR__crt_org_code
82    0000              
83    0000                       defc __crt_org_code = TAR__crt_org_code
84    0000              
85    0000                    ELSE
86    0000              
87    0000                       defc __crt_org_code = DEF__crt_org_code
88    0000              
89    0000                    ENDIF
90    0000              
91    0000                 ENDIF
92    0000              
93    0000                 IFDEF REGISTER_SP
94    0000              
95    0000                    defc __register_sp = REGISTER_SP
96    0000              
97    0000                 ELSE
98    0000              
99    0000                    IFDEF STACKPTR
100   0000              
101   0000                       defc __register_sp = STACKPTR
102   0000              
103   0000                    ELSE
104   0000              
105   0000                       IFDEF TAR__register_sp
106   0000              
107   0000                          defc __register_sp = TAR__register_sp
108   0000              
109   0000                       ELSE
110   0000              
111   0000                          defc __register_sp = DEF__register_sp
112   0000              
113   0000                       ENDIF
114   0000              
115   0000                    ENDIF
116   0000              
117   0000                 ENDIF
118   0000              
119   0000              
120   0000                 IFDEF CRT_STACK_SIZE
121   0000              
122   0000                    defc __crt_stack_size = CRT_STACK_SIZE
123   0000              
124   0000                 ELSE
125   0000              
126   0000                    IFDEF TAR__crt_stack_size
127   0000              
128   0000                       defc __crt_stack_size = TAR__crt_stack_size
129   0000              
130   0000                    ELSE
131   0000              
132   0000                       defc __crt_stack_size = DEF__crt_stack_size
133   0000              
134   0000                    ENDIF
135   0000              
136   0000                 ENDIF
137   0000              
138   0000              
139   0000                 IFDEF CRT_ORG_DATA
140   0000              
141   0000                    defc __crt_org_data = CRT_ORG_DATA
142   0000              
143   0000                 ELSE
144   0000              
145   0000                    IFDEF TAR__crt_org_data
146   0000              
147   0000                       defc __crt_org_data = TAR__crt_org_data
148   0000              
149   0000                    ELSE
150   0000              
151   0000                       defc __crt_org_data = DEF__crt_org_data
152   0000              
153   0000                    ENDIF
154   0000              
155   0000                 ENDIF
156   0000              
157   0000              
158   0000                 IFDEF CRT_ORG_BSS
159   0000              
160   0000                    defc __crt_org_bss = CRT_ORG_BSS
161   0000              
162   0000                 ELSE
163   0000              
164   0000                    IFDEF TAR__crt_org_bss
165   0000              
166   0000                       defc __crt_org_bss = TAR__crt_org_bss
167   0000              
168   0000                    ELSE
169   0000              
170   0000                       defc __crt_org_bss = DEF__crt_org_bss
171   0000              
172   0000                    ENDIF
173   0000              
174   0000                 ENDIF
175   0000              
176   0000              
177   0000                 IFDEF CRT_MODEL
178   0000              
179   0000                    defc __crt_model = CRT_MODEL
180   0000              
181   0000                 ELSE
182   0000              
183   0000                    IFDEF TAR__crt_model
184   0000              
185   0000                       defc __crt_model = TAR__crt_model
186   0000              
187   0000                    ELSE
188   0000              
189   0000                       defc __crt_model = DEF__crt_model
190   0000              
191   0000                    ENDIF
192   0000              
193   0000                 ENDIF
194   0000              
195   0000                 IFDEF CRT_INITIALIZE_BSS
196   0000              
197   0000                    defc __crt_initialize_bss = CRT_INITIALIZE_BSS
198   0000              
199   0000                 ELSE
200   0000              
201   0000                    IFDEF TAR__crt_initialize_bss
202   0000              
203   0000                       defc __crt_initialize_bss = TAR__crt_initialize_bss
204   0000              
205   0000                    ELSE
206   0000              
207   0000                       defc __crt_initialize_bss = DEF__crt_initialize_bss
208   0000              
209   0000                    ENDIF
210   0000              
211   0000                 ENDIF
212   0000              
213   0000              
214   0000                 IFDEF CRT_INCLUDE_PREAMBLE
215   0000              
216   0000                    defc __crt_include_preamble = CRT_INCLUDE_PREAMBLE
217   0000              
218   0000                 ELSE
219   0000              
220   0000                    IFDEF TAR__crt_include_preamble
221   0000              
222   0000                       defc __crt_include_preamble = TAR__crt_include_preamble
223   0000              
224   0000                    ELSE
225   0000              
226   0000                       defc __crt_include_preamble = DEF__crt_include_preamble
227   0000              
228   0000                    ENDIF
229   0000              
230   0000                 ENDIF
231   0000              
232   0000                 IFDEF CRT_ORG_VECTOR_TABLE
233   0000              
234   0000                    defc __crt_org_vector_table = CRT_ORG_VECTOR_TABLE
235   0000              
236   0000                 ELSE
237   0000              
238   0000                    IFDEF TAR__crt_org_vector_table
239   0000              
240   0000                       defc __crt_org_vector_table = TAR__crt_org_vector_table
241   0000              
242   0000                    ELSE
243   0000              
244   0000                       defc __crt_org_vector_table = DEF__crt_org_vector_table
245   0000              
246   0000                    ENDIF
247   0000              
248   0000                 ENDIF
249   0000              
250   0000                 IFDEF CRT_INTERRUPT_MODE
251   0000              
252   0000                    defc __crt_interrupt_mode = CRT_INTERRUPT_MODE
253   0000              
254   0000                 ELSE
255   0000              
256   0000                    IFDEF TAR__crt_interrupt_mode
257   0000              
258   0000                       defc __crt_interrupt_mode = TAR__crt_interrupt_mode
259   0000              
260   0000                    ELSE
261   0000              
262   0000                       defc __crt_interrupt_mode = DEF__crt_interrupt_mode
263   0000              
264   0000                    ENDIF
265   0000              
266   0000                 ENDIF
267   0000              
268   0000              
269   0000                 IFDEF CRT_ENABLE_COMMANDLINE
270   0000              
271   0000                    defc __crt_enable_commandline = CRT_ENABLE_COMMANDLINE
272   0000              
273   0000                 ELSE
274   0000              
275   0000                    IFDEF TAR__crt_enable_commandline
276   0000              
277   0000                       defc __crt_enable_commandline = TAR__crt_enable_commandline
278   0000              
279   0000                    ELSE
280   0000              
281   0000                       defc __crt_enable_commandline = DEF__crt_enable_commandline
282   0000              
283   0000                    ENDIF
284   0000              
285   0000                 ENDIF
286   0000              
287   0000              
288   0000                 IFDEF CRT_ENABLE_RESTART
289   0000              
290   0000                    defc __crt_enable_restart = CRT_ENABLE_RESTART
291   0000              
292   0000                 ELSE
293   0000              
294   0000                    IFDEF TAR__crt_enable_restart
295   0000              
296   0000                       defc __crt_enable_restart = TAR__crt_enable_restart
297   0000              
298   0000                    ELSE
299   0000              
300   0000                       defc __crt_enable_restart = DEF__crt_enable_restart
301   0000              
302   0000                    ENDIF
303   0000              
304   0000                 ENDIF
305   0000              
306   0000              
307   0000                 IFDEF CRT_ENABLE_CLOSE
308   0000              
309   0000                    defc __crt_enable_close = CRT_ENABLE_CLOSE
310   0000              
311   0000                 ELSE
312   0000              
313   0000                    IFDEF TAR__crt_enable_close
314   0000              
315   0000                       defc __crt_enable_close = TAR__crt_enable_close
316   0000              
317   0000                    ELSE
318   0000              
319   0000                       defc __crt_enable_close = DEF__crt_enable_close
320   0000              
321   0000                    ENDIF
322   0000              
323   0000                 ENDIF
324   0000              
325   0000              
326   0000                 IFDEF CRT_ENABLE_EIDI
327   0000              
328   0000                    defc __crt_enable_eidi = CRT_ENABLE_EIDI
329   0000              
330   0000                 ELSE
331   0000              
332   0000                    IFDEF TAR__crt_enable_eidi
333   0000              
334   0000                       defc __crt_enable_eidi = TAR__crt_enable_eidi
335   0000              
336   0000                    ELSE
337   0000              
338   0000                       defc __crt_enable_eidi = DEF__crt_enable_eidi
339   0000              
340   0000                    ENDIF
341   0000              
342   0000                 ENDIF
343   0000              
344   0000              
345   0000                 IF __crt_enable_restart
346   0000              
347   0000                    defc __crt_on_exit = 0x10008
348   0000              
349   0000                 ELSE
350   0000              
351   0000                    IFDEF CRT_ON_EXIT
352   0000              
353   0000                       defc __crt_on_exit = CRT_ON_EXIT
354   0000              
355   0000                    ELSE
356   0000              
357   0000                       IFDEF TAR__crt_on_exit
358   0000              
359   0000                          defc __crt_on_exit = TAR__crt_on_exit
360   0000              
361   0000                       ELSE
362   0000              
363   0000                          defc __crt_on_exit = DEF__crt_on_exit
364   0000              
365   0000                       ENDIF
366   0000              
367   0000                    ENDIF
368   0000              
369   0000                 ENDIF
370   0000              
371   0000              
372   0000                 IFDEF CLIB_EXIT_STACK_SIZE
373   0000              
374   0000                    defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
375   0000              
376   0000                 ELSE
377   0000              
378   0000                    IFDEF TAR__clib_exit_stack_size
379   0000              
380   0000                       defc __clib_exit_stack_size = TAR__clib_exit_stack_size
381   0000              
382   0000                    ELSE
383   0000              
384   0000                       defc __clib_exit_stack_size = DEF__clib_exit_stack_size
385   0000              
386   0000                    ENDIF
387   0000              
388   0000                 ENDIF
389   0000              
390   0000              
391   0000                 IFDEF CLIB_QUICKEXIT_STACK_SIZE
392   0000              
393   0000                    defc __clib_quickexit_stack_size = CLIB_QUICKEXIT_STACK_SIZE
394   0000              
395   0000                 ELSE
396   0000              
397   0000                    IFDEF TAR__clib_quickexit_stack_size
398   0000              
399   0000                       defc __clib_quickexit_stack_size = TAR__clib_quickexit_stack_size
400   0000              
401   0000                    ELSE
402   0000              
403   0000                       defc __clib_quickexit_stack_size = DEF__clib_quickexit_stack_size
404   0000              
405   0000                    ENDIF
406   0000              
407   0000                 ENDIF
408   0000              
409   0000              
410   0000                 IFDEF CLIB_MALLOC_HEAP_SIZE
411   0000              
412   0000                    defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
413   0000              
414   0000                 ELSE
415   0000              
416   0000                    IFDEF TAR__clib_malloc_heap_size
417   0000              
418   0000                       defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
419   0000              
420   0000                    ELSE
421   0000              
422   0000                       defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
423   0000              
424   0000                    ENDIF
425   0000              
426   0000                 ENDIF
427   0000              
428   0000              
429   0000                 IFDEF CLIB_STDIO_HEAP_SIZE
430   0000              
431   0000                    defc __clib_stdio_heap_size = CLIB_STDIO_HEAP_SIZE
432   0000              
433   0000                 ELSE
434   0000              
435   0000                    IFDEF TAR__clib_stdio_heap_size
436   0000              
437   0000                       defc __clib_stdio_heap_size = TAR__clib_stdio_heap_size
438   0000              
439   0000                    ELSE
440   0000              
441   0000                       defc __clib_stdio_heap_size = DEF__clib_stdio_heap_size
442   0000              
443   0000                    ENDIF
444   0000              
445   0000                 ENDIF
446   0000              
447   0000              
448   0000                 IFDEF CLIB_BALLOC_TABLE_SIZE
449   0000              
450   0000                    defc __clib_balloc_table_size = CLIB_BALLOC_TABLE_SIZE
451   0000              
452   0000                 ELSE
453   0000              
454   0000                    IFDEF TAR__clib_balloc_table_size
455   0000              
456   0000                       defc __clib_balloc_table_size = TAR__clib_balloc_table_size
457   0000              
458   0000                    ELSE
459   0000              
460   0000                       defc __clib_balloc_table_size = DEF__clib_balloc_table_size
461   0000              
462   0000                    ENDIF
463   0000              
464   0000                 ENDIF
465   0000              
466   0000              
467   0000                 IFDEF CLIB_FOPEN_MAX
468   0000              
469   0000                    defc __clib_fopen_max = CLIB_FOPEN_MAX
470   0000              
471   0000                 ELSE
472   0000              
473   0000                    IFDEF TAR__clib_fopen_max
474   0000              
475   0000                       defc __clib_fopen_max = TAR__clib_fopen_max
476   0000              
477   0000                    ELSE
478   0000              
479   0000                       defc __clib_fopen_max = DEF__clib_fopen_max
480   0000              
481   0000                    ENDIF
482   0000              
483   0000                 ENDIF
484   0000              
485   0000              
486   0000                 IFDEF CLIB_OPEN_MAX
487   0000              
488   0000                    defc __clib_open_max = CLIB_OPEN_MAX
489   0000              
490   0000                 ELSE
491   0000              
492   0000                    IFDEF TAR__clib_open_max
493   0000              
494   0000                       defc __clib_open_max = TAR__clib_open_max
495   0000              
496   0000                    ELSE
497   0000              
498   0000                       defc __clib_open_max = DEF__clib_open_max
499   0000              
500   0000                    ENDIF
501   0000              
502   0000                 ENDIF
503   0000              
504   0000              
505   0000                 IFDEF CRT_ENABLE_RST
506   0000              
507   0000                    defc __crt_enable_rst = CRT_ENABLE_RST
508   0000              
509   0000                 ELSE
510   0000              
511   0000                    IFDEF TAR__crt_enable_rst
512   0000              
513   0000                       defc __crt_enable_rst = TAR__crt_enable_rst
514   0000              
515   0000                    ELSE
516   0000              
517   0000                       defc __crt_enable_rst = DEF__crt_enable_rst
518   0000              
519   0000                    ENDIF
520   0000              
521   0000                 ENDIF
522   0000              
523   0000              
524   0000                 IFDEF CRT_ENABLE_NMI
525   0000              
526   0000                    defc __crt_enable_nmi = CRT_ENABLE_NMI
527   0000              
528   0000                 ELSE
529   0000              
530   0000                    IFDEF TAR__crt_enable_nmi
531   0000              
532   0000                       defc __crt_enable_nmi = TAR__crt_enable_nmi
533   0000              
534   0000                    ELSE
535   0000              
536   0000                       defc __crt_enable_nmi = DEF__crt_enable_nmi
537   0000              
538   0000                    ENDIF
539   0000              
540   0000                 ENDIF
541   0000              
542   0000                 IFDEF CRT_ENABLE_TRAP
543   0000              
544   0000                    defc __crt_enable_trap = CRT_ENABLE_TRAP
545   0000              
546   0000                 ELSE
547   0000              
548   0000                    IFDEF TAR__crt_enable_trap
549   0000              
550   0000                       defc __crt_enable_trap = TAR__crt_enable_trap
551   0000              
552   0000                    ELSE
553   0000              
554   0000                       defc __crt_enable_trap = DEF__crt_enable_trap
555   0000              
556   0000                    ENDIF
557   0000              
558   0000                 ENDIF
559   0000              
560   0000                 ;; rules that must be processed by m4
561   0000              
562   0000              
563   0000              
564   0000                 IFNDEF __crt_include_driver_instantiation
565   0000                    defc __crt_include_driver_instantiation = 0
566   0000                 ENDIF
567   0000              
568   0000                 ;; public definitions
569   0000              
570   0000                 PUBLIC __clib_fopen_max
571   0000                 PUBLIC __clib_open_max
572   0000              
573   0000                 PUBLIC __exit_stack_size
574   0000                 PUBLIC __quickexit_stack_size
575   0000              
576   0000                 defc __exit_stack_size = __clib_exit_stack_size
577   0000                 defc __quickexit_stack_size = __clib_quickexit_stack_size
578   0000              
579   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
580   0000              
581   0000              
582   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
583   0000              ;; crt rules for zx ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
584   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
585   0000              
586   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
587   0000                 ; Define Memory Banks
588   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
589   0000              
590   0000                 IFNDEF CRT_ORG_BANK_00
591   0000                    defc CRT_ORG_BANK_00 = 0xc000
592   0000                 ENDIF
593   0000              
594   0000                 IFNDEF CRT_ORG_BANK_01
595   0000                    defc CRT_ORG_BANK_01 = 0xc000
596   0000                 ENDIF
597   0000              
598   0000                 IFNDEF CRT_ORG_BANK_02
599   0000                    defc CRT_ORG_BANK_02 = 0xc000
600   0000                 ENDIF
601   0000              
602   0000                 IFNDEF CRT_ORG_BANK_03
603   0000                    defc CRT_ORG_BANK_03 = 0xc000
604   0000                 ENDIF
605   0000              
606   0000                 IFNDEF CRT_ORG_BANK_04
607   0000                    defc CRT_ORG_BANK_04 = 0xc000
608   0000                 ENDIF
609   0000              
610   0000                 IFNDEF CRT_ORG_BANK_05
611   0000                    defc CRT_ORG_BANK_05 = 0xc000
612   0000                 ENDIF
613   0000              
614   0000                 IFNDEF CRT_ORG_BANK_06
615   0000                    defc CRT_ORG_BANK_06 = 0xc000
616   0000                 ENDIF
617   0000              
618   0000                 IFNDEF CRT_ORG_BANK_07
619   0000                    defc CRT_ORG_BANK_07 = 0xc000
620   0000                 ENDIF
621   0000              
622   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
623   0000                 ; Input Terminal Settings
624   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
625   0000              
626   0000                 IFNDEF CRT_ITERM_TERMINAL_FLAGS
627   0000                    defc CRT_ITERM_TERMINAL_FLAGS = 0x03b0
628   0000                 ENDIF
629   0000              
630   0000                 ; buffer size must be available to m4 (requires special case in zcc)
631   0000              
632   0000              
633   0000              
634   0000                 IFNDEF CRT_ITERM_EDIT_BUFFER_SIZE
635   0000                    defc CRT_ITERM_EDIT_BUFFER_SIZE = 64
636   0000                 ENDIF
637   0000              
638   0000                 ;
639   0000                 ; LASTK Input Terminal Only
640   0000                 ;
641   0000              
642   0000                 IFNDEF CRT_ITERM_LASTK_ADDRESS
643   0000                    defc CRT_ITERM_LASTK_ADDRESS = 23560
644   0000                 ENDIF
645   0000              
646   0000                 ;
647   0000                 ; INKEY Input Terminal Only (used by supplied CRTs)
648   0000                 ;
649   0000              
650   0000                 IFNDEF CRT_ITERM_INKEY_DEBOUNCE
651   0000                    defc CRT_ITERM_INKEY_DEBOUNCE = 1
652   0000                 ENDIF
653   0000              
654   0000                 IFNDEF CRT_ITERM_INKEY_REPEAT_START
655   0000                    defc CRT_ITERM_INKEY_REPEAT_START = 500
656   0000                 ENDIF
657   0000              
658   0000                 IFNDEF CRT_ITERM_INKEY_REPEAT_RATE
659   0000                    defc CRT_ITERM_INKEY_REPEAT_RATE = 15
660   0000                 ENDIF
661   0000              
662   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
663   0000                 ; Output Terminal Settings
664   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
665   0000              
666   0000                 IFNDEF CRT_OTERM_TERMINAL_FLAGS
667   0000                    defc CRT_OTERM_TERMINAL_FLAGS = 0x2370
668   0000                 ENDIF
669   0000              
670   0000                 ;
671   0000                 ; Terminal Window Dimensions in Characters
672   0000                 ;
673   0000              
674   0000                 IFNDEF CRT_OTERM_WINDOW_X
675   0000                    defc CRT_OTERM_WINDOW_X = 0           ; multiplied by two in 64 col terminals
676   0000                 ENDIF
677   0000              
678   0000                 IFNDEF CRT_OTERM_WINDOW_WIDTH
679   0000                    defc CRT_OTERM_WINDOW_WIDTH = 32      ; multiplied by two in 64 col terminals
680   0000                 ENDIF
681   0000              
682   0000                 IFNDEF CRT_OTERM_WINDOW_Y
683   0000                    defc CRT_OTERM_WINDOW_Y = 0
684   0000                 ENDIF
685   0000              
686   0000                 IFNDEF CRT_OTERM_WINDOW_HEIGHT
687   0000                    defc CRT_OTERM_WINDOW_HEIGHT = 24
688   0000                 ENDIF
689   0000              
690   0000                 ;
691   0000                 ; Terminal Text Colour
692   0000                 ;
693   0000              
694   0000                 IFNDEF CRT_OTERM_TEXT_COLOR
695   0000                    defc CRT_OTERM_TEXT_COLOR = 0x38
696   0000                 ENDIF
697   0000              
698   0000                 IFNDEF CRT_OTERM_TEXT_COLOR_MASK
699   0000                    defc CRT_OTERM_TEXT_COLOR_MASK = 0x00
700   0000                 ENDIF
701   0000              
702   0000                 IFNDEF CRT_OTERM_BACKGROUND_COLOR
703   0000                    defc CRT_OTERM_BACKGROUND_COLOR = 0x38
704   0000                 ENDIF
705   0000              
706   0000                 ;
707   0000                 ; FZX Proportional Font Output Terminals
708   0000                 ;
709   0000              
710   0000                 ; The terminal window contains the paper into
711   0000                 ; which fzx characters are drawn
712   0000              
713   0000                 IFNDEF CRT_OTERM_FZX_PAPER_X
714   0000                    defc CRT_OTERM_FZX_PAPER_X = 0
715   0000                 ENDIF
716   0000              
717   0000                 IFNDEF CRT_OTERM_FZX_PAPER_WIDTH
718   0000                    defc CRT_OTERM_FZX_PAPER_WIDTH = 256
719   0000                 ENDIF
720   0000              
721   0000                 IFNDEF CRT_OTERM_FZX_PAPER_Y
722   0000                    defc CRT_OTERM_FZX_PAPER_Y = 0
723   0000                 ENDIF
724   0000              
725   0000                 IFNDEF CRT_OTERM_FZX_PAPER_HEIGHT
726   0000                    defc CRT_OTERM_FZX_PAPER_HEIGHT = 192
727   0000                 ENDIF
728   0000              
729   0000                 ; draw mode must be available to m4 (requires special case in zcc)
730   0000                 ; 0 = OR, 1 = XOR, 2 = CLEAR
731   0000              
732   0000              
733   0000              
734   0000                 IFNDEF CRT_OTERM_FZX_DRAW_MODE
735   0000                    defc CRT_OTERM_FZX_DRAW_MODE = 1
736   0000                 ENDIF
737   0000              
738   0000                 ; 0 = single, 1 = 1.5, 2 = double
739   0000              
740   0000                 IFNDEF CRT_OTERM_FZX_LINE_SPACING
741   0000                    defc CRT_OTERM_FZX_LINE_SPACING = 0
742   0000                 ENDIF
743   0000              
744   0000                 ; left margin in pixels to allow kerning
745   0000              
746   0000                 IFNDEF CRT_OTERM_FZX_LEFT_MARGIN
747   0000                    defc CRT_OTERM_FZX_LEFT_MARGIN = 3
748   0000                 ENDIF
749   0000              
750   0000                 ; space character width expansion in pixels
751   0000              
752   0000                 IFNDEF CRT_OTERM_FZX_SPACE_EXPAND
753   0000                    defc CRT_OTERM_FZX_SPACE_EXPAND = 0
754   0000                 ENDIF
755   0000              
756   0000                 ;
757   0000                 ; FONT SELECTION
758   0000                 ; use pragam redirect to change font
759   0000                 ;
760   0000                 ; #pragam redirect CRT_OTERM_FONT_8X8 = _font_8x8_rom        ; 32-col font definition in rom
761   0000                 ; #pragma redirect CRT_OTERM_FONT_8X8 = _font_8x8_zx_system  ; 32-col font
762   0000                 ; #pragma redirect CRT_OTERM_FONT_4X8 = _font_4x8_default    ; 64-col font
763   0000                 ; #pragma redirect CRT_OTERM_FONT_FZX = _ff_ind_Termino      ; fzx proportional font
764   0000              
765   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
766   0000              
767   0000              
768   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
769   0000              ;; SET UP MEMORY MODEL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
770   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
771   0000              
772   0000              include "crt_memory_map.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __MMAP = -1
7     0000              
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000                 ;; user supplied memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000                 INCLUDE "mmap.inc"
13    0000              
14    0000              ENDIF
15    0000              
16    0000              IF __MMAP = 0
17    0000              
18    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000                 ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
20    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
22    0000                 INCLUDE "../crt_memory_model_z80.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000              
8     0000              SECTION CODE
9     0000              
10    0000              org __crt_org_code
11    0000              
12    0000              IF __crt_org_vector_table < 0
13    0000              
14    0000              section code_vector
15    0000              section code_crt_start
16    0000              
17    0000              ENDIF
18    0000              
19    0000              section code_crt_init
20    0000              section code_crt_main
21    0000              section code_crt_exit
22    0000              section code_crt_return
23    0000              section code_crt_common
24    0000              
25    0000              section code_driver
26    0000              section code_font
27    0000              section code_clib
28    0000                include "../../clib_code.inc"
1     0000              
2     0000              ;; clib code segments ;;;;;;;;;
3     0000              
4     0000              section code_adt_b_array
5     0000              section code_adt_b_vector
6     0000              section code_adt_ba_priority_queue
7     0000              section code_adt_ba_stack
8     0000              section code_adt_bv_priority_queue
9     0000              section code_adt_bv_stack
10    0000              section code_adt_p_forward_list
11    0000              section code_adt_p_forward_list_alt
12    0000              section code_adt_p_list
13    0000              section code_adt_p_queue
14    0000              section code_adt_p_stack
15    0000              section code_adt_w_array
16    0000              section code_adt_w_vector
17    0000              section code_adt_wa_priority_queue
18    0000              section code_adt_wa_stack
19    0000              section code_adt_wv_priority_queue
20    0000              section code_adt_wv_stack
21    0000              section code_alloc_balloc
22    0000              section code_alloc_malloc
23    0000              section code_alloc_obstack
24    0000              section code_arch
25    0000              section code_bifrost_h
26    0000              section code_bifrost_l
27    0000              section code_bifrost2
28    0000              section code_compress_aplib
29    0000              section code_compress_zx7
30    0000              section code_ctype
31    0000              section code_driver_general
32    0000              section code_driver_character_input
33    0000              section code_driver_character_output
34    0000              section code_driver_memstream
35    0000              section code_driver_terminal_input
36    0000              section code_driver_terminal_output
37    0000              section code_driver_tty
38    0000              section code_error
39    0000              section code_fcntl
40    0000              section code_font_fzx
41    0000              section code_fp_genmath
42    0000              section code_fp_math48
43    0000              section code_im2
44    0000              section code_input
45    0000              section code_inttypes
46    0000              section code_l
47    0000              section code_l_sccz80
48    0000              section code_l_sdcc
49    0000              section code_locale
50    0000              section code_math
51    0000              section code_network
52    0000              section code_nirvanam
53    0000              section code_nirvanap
54    0000              section code_PSGlib
55    0000              section code_setjmp
56    0000              section code_SMSlib
57    0000              section code_sound_bit
58    0000              section code_stdio
59    0000              section code_stdlib
60    0000              section code_string
61    0000              section code_temp_sp1
62    0000              section code_threads
63    0000              section code_threads_mutex
64    0000              section code_z180
65    0000              section code_z80
66    0000              
67    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
68    0000              
29    0000              section code_lib
30    0000              section code_compiler
31    0000              section code_user
32    0000              
33    0000              section rodata_driver
34    0000              section rodata_font
35    0000              section rodata_clib
36    0000                include "../../clib_rodata.inc"
1     0000              
2     0000              ;; clib rodata segments ;;;;;;;
3     0000              
4     0000              section rodata_arch
5     0000              section rodata_error_strings
6     0000              section rodata_error_string_end
7     0000  00          defb 0
8     0001              section rodata_fcntl
9     0000              section rodata_font_4x8
10    0000              section rodata_font_8x8
11    0000              section rodata_font_fzx
12    0000              section rodata_input
13    0000              section rodata_SMSlib
14    0000              section rodata_sound_bit
15    0000              section rodata_stdio
16    0000              section rodata_stdlib
17    0000              
18    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000              
37    0000                ;;section rodata_error_strings
38    0000                ;;section rodata_error_string_end
39    0000                ;;defb 0
40    0000              section rodata_lib
41    0000              section rodata_compiler
42    0000              section rodata_user
43    0000              
44    0000              SECTION CODE_END
45    0000              
46    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
47    0000              
48    0000              SECTION DATA
49    0000              
50    0000              IF __crt_org_data
51    0000              
52    0000                 org __crt_org_data
53    0000              
54    0000              ELSE
55    0000              
56    0000                 IF __crt_model
57    0000              
58    0000                    "DATA section address must be specified for rom models"
59    0000              
60    0000                 ENDIF
61    0000              
62    0000              ENDIF
63    0000              
64    0000              section data_align_256
65    0000              section data_align_128
66    0000              section data_align_64
67    0000              section data_align_32
68    0000              section data_align_16
69    0000              section data_align_8
70    0000              section data_align_4
71    0000              section data_align_2
72    0000              
73    0000              section smc_driver
74    0000              section smc_font
75    0000              section smc_clib
76    0000                include "../../clib_smc.inc"
1     0000              
2     0000              ;; clib self-modifying code ;;;
3     0000              
4     0000              section smc_fcntl
5     0000              section smc_l
6     0000              section smc_sound_bit
7     0000              
8     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000              
77    0000              section smc_lib
78    0000              section smc_compiler
79    0000              section smc_user
80    0000              
81    0000              section data_driver
82    0000              section data_font
83    0000              section data_clib
84    0000                include "../../clib_data.inc"
1     0000              
2     0000              ;; clib data segments ;;;;;;;;;
3     0000              
4     0000              section data_alloc_balloc
5     0000              section data_alloc_malloc
6     0000              section data_arch
7     0000              section data_fcntl
8     0000              section data_fcntl_stdio_heap_head
9     0000              section data_fcntl_stdio_heap_body
10    0000              section data_fcntl_stdio_heap_tail
11    0000              section data_fcntl_fdtable_body
12    0000              section data_PSGlib
13    0000              section data_SMSlib
14    0000              section data_sound_bit
15    0000              section data_stdio
16    0000              section data_stdlib
17    0000              section data_threads
18    0000              
19    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000              
85    0000                ;;section data_fcntl_stdio_heap_head
86    0000                ;;section data_fcntl_stdio_heap_body
87    0000                ;;section data_fcntl_stdio_heap_tail
88    0000                ;;section data_fcntl_fdtable_body
89    0000              section data_lib
90    0000              section data_compiler
91    0000              section data_user
92    0000              
93    0000              SECTION DATA_END
94    0000              
95    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
96    0000              
97    0000              SECTION BSS
98    0000              
99    0000              IF __crt_org_bss
100   0000              
101   0000                 org __crt_org_bss
102   0000              
103   0000              ELSE
104   0000              
105   0000                 IF __crt_model
106   0000              
107   0000                    org -1
108   0000              
109   0000                 ENDIF
110   0000              
111   0000              ENDIF
112   0000              
113   0000              section bss_align_256
114   0000              section bss_align_128
115   0000              section bss_align_64
116   0000              section bss_align_32
117   0000              section bss_align_16
118   0000              section bss_align_8
119   0000              section bss_align_4
120   0000              section bss_align_2
121   0000              
122   0000              section bss_driver
123   0000              section bss_font
124   0000              section bss_clib
125   0000                include "../../clib_bss.inc"
1     0000              
2     0000              ;; clib bss segments ;;;;;;;;;;
3     0000              
4     0000              section bss_arch
5     0000              section bss_alloc_balloc
6     0000              section bss_alloc_malloc
7     0000              section bss_compress_aplib
8     0000              section bss_error
9     0000              section bss_fcntl
10    0000              section bss_input
11    0000              section bss_PSGlib
12    0000              section bss_SMSlib
13    0000              section bss_sound_bit
14    0000              section bss_stdio
15    0000              section bss_stdlib
16    0000              section bss_string
17    0000              
18    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000              
126   0000              section bss_lib
127   0000              section bss_compiler
128   0000              section bss_user
129   0000              
130   0000              section BSS_UNINITIALIZED
131   0000              SECTION BSS_END
132   0000              
133   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
134   0000              
135   0000              IF __crt_org_vector_table >= 0
136   0000              
137   0000              SECTION code_vector
138   0000              org __crt_org_vector_table
139   0000              
140   0000              ENDIF
141   0000              
142   0000              ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
143   0000              
23    0000              
24    0000                 SECTION BANK_00
25    0000                 org CRT_ORG_BANK_00
26    0000              
27    0000                 SECTION BANK_01
28    0000                 org CRT_ORG_BANK_01
29    0000              
30    0000                 SECTION BANK_02
31    0000                 org CRT_ORG_BANK_02
32    0000              
33    0000                 SECTION BANK_03
34    0000                 org CRT_ORG_BANK_03
35    0000              
36    0000                 SECTION BANK_04
37    0000                 org CRT_ORG_BANK_04
38    0000              
39    0000                 SECTION BANK_05
40    0000                 org CRT_ORG_BANK_05
41    0000              
42    0000                 SECTION BANK_06
43    0000                 org CRT_ORG_BANK_06
44    0000              
45    0000                 SECTION BANK_07
46    0000                 org CRT_ORG_BANK_07
47    0000              
48    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
49    0000              
50    0000              ENDIF
51    0000              
52    0000              ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
53    0000              
773   0000              
774   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
775   0000              ;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
776   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
777   0000              
778   0000              ifndef CRT_OTERM_FONT_8X8
779   0000              
780   0000                 PUBLIC CRT_OTERM_FONT_8X8
781   0000                 EXTERN _font_8x8_rom
782   0000                 defc CRT_OTERM_FONT_8X8 = _font_8x8_rom
783   0000              
784   0000              endif
785   0000              
786   0000              
787   0000              ; When FILEs and FDSTRUCTs are instantiated labels are assigned
788   0000              ; to point at created structures.
789   0000              ;
790   0000              ; The label formats are:
791   0000              ;
792   0000              ; __i_stdio_file_n     = address of static FILE structure #n (0..__I_STDIO_NUM_FILE-1)
793   0000              ; __i_fcntl_fdstruct_n = address of static FDSTRUCT #n (0..__I_FCNTL_NUM_FD-1)
794   0000              ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
795   0000              
796   0000              
797   0000              
798   0000              
799   0000              
800   0000              
801   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
802   0000                 ; FILE  : _stdin
803   0000                 ;
804   0000                 ; driver: zx_01_input_kbd_inkey
805   0000                 ; fd    : 0
806   0000                 ; mode  : read only
807   0000                 ; type  : 001 = input terminal
808   0000                 ; tie   : __i_fcntl_fdstruct_1
809   0000                 ;
810   0000                 ; ioctl_flags   : CRT_ITERM_TERMINAL_FLAGS
811   0000                 ; buffer size   : 64 bytes
812   0000                 ; debounce      : CRT_ITERM_INKEY_DEBOUNCE ms
813   0000                 ; repeat_start  : CRT_ITERM_INKEY_REPEAT_START ms
814   0000                 ; repeat_period : CRT_ITERM_INKEY_REPEAT_RATE ms
815   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
816   0000              
817   0000              
818   0000                 SECTION data_clib
819   0000                 SECTION data_stdio
820   0000              
821   0000                 ; FILE *
822   0000              
823   0000                 PUBLIC _stdin
824   0000              
825   0000  04 00          _stdin:  defw __i_stdio_file_0 + 2
826   0002              
827   0002                 ; FILE structure
828   0002              
829   0002                 __i_stdio_file_0:
830   0002              
831   0002                    ; open files link
832   0002              
833   0002  00 00             defw 0
834   0004              
835   0004                    ; jump to underlying fd
836   0004              
837   0004  C3                defb 195
838   0005  06 00             defw __i_fcntl_fdstruct_0
839   0007              
840   0007                    ; state_flags_0
841   0007                    ; state_flags_1
842   0007                    ; conversion flags
843   0007                    ; ungetc
844   0007              
845   0007  40                defb 0x40      ; read + stdio manages ungetc + normal file type
846   0008  02                defb 0x02      ; last operation was read
847   0009  00                defb 0
848   000A  00                defb 0
849   000B              
850   000B                    ; mtx_recursive
851   000B              
852   000B  00                defb 0         ; thread owner = none
853   000C  02                defb 0x02      ; mtx_recursive
854   000D  00                defb 0         ; lock count = 0
855   000E  FE                defb 0xfe      ; atomic spinlock
856   000F  00 00             defw 0         ; list of blocked threads
857   0011              
858   0011              
859   0011                 ; fd table entry
860   0011              
861   0011                 SECTION data_fcntl_fdtable_body
862   0000  06 00          defw __i_fcntl_fdstruct_0
863   0002              
864   0002                 ; FDSTRUCT structure
865   0002              
866   0002                 SECTION data_fcntl_stdio_heap_body
867   0000              
868   0000                 EXTERN console_01_input_terminal_fdriver
869   0000                 EXTERN zx_01_input_kbd_inkey
870   0000              
871   0000                 __i_fcntl_heap_0:
872   0000              
873   0000                    ; heap header
874   0000              
875   0000  69 00             defw __i_fcntl_heap_1
876   0002  69 00             defw 105
877   0004  00 00             defw 0
878   0006              
879   0006                 __i_fcntl_fdstruct_0:
880   0006              
881   0006                    ; FDSTRUCT structure
882   0006              
883   0006                    ; call to first entry to driver
884   0006              
885   0006  CD                defb 205
886   0007  00 00             defw console_01_input_terminal_fdriver
887   0009              
888   0009                    ; jump to driver
889   0009              
890   0009  C3                defb 195
891   000A  00 00             defw zx_01_input_kbd_inkey
892   000C              
893   000C                    ; flags
894   000C                    ; reference_count
895   000C                    ; mode_byte
896   000C              
897   000C  01                defb 0x01      ; stdio handles ungetc + type = input terminal
898   000D  02                defb 2
899   000E  01                defb 0x01      ; read only
900   000F              
901   000F                    ; ioctl_flags
902   000F              
903   000F  B0 03             defw CRT_ITERM_TERMINAL_FLAGS
904   0011              
905   0011                    ; mtx_plain
906   0011              
907   0011  00                defb 0         ; thread owner = none
908   0012  01                defb 0x01      ; mtx_plain
909   0013  00                defb 0         ; lock count = 0
910   0014  FE                defb 0xfe      ; atomic spinlock
911   0015  00 00             defw 0         ; list of blocked threads
912   0017              
913   0017                    ; tied output terminal
914   0017                    ; pending_char
915   0017                    ; read_index
916   0017              
917   0017  6F 00             defw __i_fcntl_fdstruct_1
918   0019  00                defb 0
919   001A  00 00             defw 0
920   001C              
921   001C                    ; b_array_t edit_buffer
922   001C              
923   001C  29 00             defw __edit_buffer_0
924   001E  00 00             defw 0
925   0020  40 00             defw 64
926   0022              
927   0022                    ; getk_state
928   0022                    ; getk_lastk
929   0022                    ; getk_debounce_ms
930   0022                    ; getk_repeatbegin_ms
931   0022                    ; getk_repeatperiod_ms
932   0022              
933   0022  00                defb 0
934   0023  00                defb 0
935   0024  01                defb CRT_ITERM_INKEY_DEBOUNCE
936   0025  F4 01             defw CRT_ITERM_INKEY_REPEAT_START
937   0027  0F 00             defw CRT_ITERM_INKEY_REPEAT_RATE
938   0029              
939   0029              
940   0029                    ; reserve space for edit buffer
941   0029              
942   0029  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0049  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                              __edit_buffer_0:   defs 64
943   0069              
944   0069              
945   0069              
946   0069                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
947   0069              
948   0069              
949   0069              
950   0069                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
951   0069                 ; FILE  : _stdout
952   0069                 ;
953   0069                 ; driver: zx_01_output_char_32
954   0069                 ; fd    : 1
955   0069                 ; mode  : write only
956   0069                 ; type  : 002 = output terminal
957   0069                 ;
958   0069                 ; ioctl_flags   : CRT_OTERM_TERMINAL_FLAGS
959   0069                 ; cursor coord  : (0,0)
960   0069                 ; window        : (CRT_OTERM_WINDOW_X,CRT_OTERM_WINDOW_WIDTH,CRT_OTERM_WINDOW_Y,CRT_OTERM_WINDOW_HEIGHT)
961   0069                 ; scroll limit  : 0
962   0069                 ; font address  : CRT_OTERM_FONT_8X8
963   0069                 ; text colour   : CRT_OTERM_TEXT_COLOR
964   0069                 ; text mask     : CRT_OTERM_TEXT_COLOR_MASK
965   0069                 ; background    : CRT_OTERM_BACKGROUND_COLOR
966   0069                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
967   0069              
968   0069              
969   0069                 SECTION data_clib
970   0000                 SECTION data_stdio
971   0011              
972   0011                 ; FILE *
973   0011              
974   0011                 PUBLIC _stdout
975   0011              
976   0011  15 00          _stdout:  defw __i_stdio_file_1 + 2
977   0013              
978   0013                 ; FILE structure
979   0013              
980   0013                 __i_stdio_file_1:
981   0013              
982   0013                    ; open files link
983   0013              
984   0013  02 00             defw __i_stdio_file_0
985   0015              
986   0015                    ; jump to underlying fd
987   0015              
988   0015  C3                defb 195
989   0016  6F 00             defw __i_fcntl_fdstruct_1
990   0018              
991   0018                    ; state_flags_0
992   0018                    ; state_flags_1
993   0018                    ; conversion flags
994   0018                    ; ungetc
995   0018              
996   0018  80                defb 0x80         ; write + normal file type
997   0019  00                defb 0            ; last operation was write
998   001A  00                defb 0
999   001B  00                defb 0
1000  001C              
1001  001C                    ; mtx_recursive
1002  001C              
1003  001C  00                defb 0         ; thread owner = none
1004  001D  02                defb 0x02      ; mtx_recursive
1005  001E  00                defb 0         ; lock count = 0
1006  001F  FE                defb 0xfe      ; atomic spinlock
1007  0020  00 00             defw 0         ; list of blocked threads
1008  0022              
1009  0022              
1010  0022                 ; fd table entry
1011  0022              
1012  0022                 SECTION data_fcntl_fdtable_body
1013  0002  6F 00          defw __i_fcntl_fdstruct_1
1014  0004              
1015  0004                 ; FDSTRUCT structure
1016  0004              
1017  0004                 SECTION data_fcntl_stdio_heap_body
1018  0069              
1019  0069                 EXTERN console_01_output_terminal_fdriver
1020  0069                 EXTERN zx_01_output_char_32
1021  0069              
1022  0069                 __i_fcntl_heap_1:
1023  0069              
1024  0069                    ; heap header
1025  0069              
1026  0069  8C 00             defw __i_fcntl_heap_2
1027  006B  23 00             defw 35
1028  006D  00 00             defw __i_fcntl_heap_0
1029  006F              
1030  006F                 __i_fcntl_fdstruct_1:
1031  006F              
1032  006F                    ; FDSTRUCT structure
1033  006F              
1034  006F                    ; call to first entry to driver
1035  006F              
1036  006F  CD                defb 205
1037  0070  00 00             defw console_01_output_terminal_fdriver
1038  0072              
1039  0072                    ; jump to driver
1040  0072              
1041  0072  C3                defb 195
1042  0073  00 00             defw zx_01_output_char_32
1043  0075              
1044  0075                    ; flags
1045  0075                    ; reference_count
1046  0075                    ; mode_byte
1047  0075              
1048  0075  02                defb 0x02      ; type = output terminal
1049  0076  02                defb 2
1050  0077  02                defb 0x02      ; write only
1051  0078              
1052  0078                    ; ioctl_flags
1053  0078              
1054  0078  70 23             defw CRT_OTERM_TERMINAL_FLAGS
1055  007A              
1056  007A                    ; mtx_plain
1057  007A              
1058  007A  00                defb 0         ; thread owner = none
1059  007B  01                defb 0x01      ; mtx_plain
1060  007C  00                defb 0         ; lock count = 0
1061  007D  FE                defb 0xfe      ; atomic spinlock
1062  007E  00 00             defw 0         ; list of blocked threads
1063  0080              
1064  0080                    ; cursor coordinate
1065  0080                    ; window rectangle
1066  0080                    ; scroll limit
1067  0080              
1068  0080  00 00             defb 0, 0
1069  0082  00 20 00 18       defb CRT_OTERM_WINDOW_X, CRT_OTERM_WINDOW_WIDTH, CRT_OTERM_WINDOW_Y, CRT_OTERM_WINDOW_HEIGHT
1070  0086  00                defb 0
1071  0087              
1072  0087                    ; font address
1073  0087                    ; text colour
1074  0087                    ; text mask
1075  0087                    ; background colour
1076  0087              
1077  0087                    EXTERN CRT_OTERM_FONT_8X8
1078  0087              
1079  0087  00 FF             defw CRT_OTERM_FONT_8X8 - 256
1080  0089  38                defb CRT_OTERM_TEXT_COLOR
1081  008A  00                defb CRT_OTERM_TEXT_COLOR_MASK
1082  008B  38                defb CRT_OTERM_BACKGROUND_COLOR
1083  008C              
1084  008C              
1085  008C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1086  008C              
1087  008C              
1088  008C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1089  008C                 ; DUPED FILE DESCRIPTOR
1090  008C                 ;
1091  008C                 ; FILE  : _stderr
1092  008C                 ; flags : 0x80
1093  008C                 ;
1094  008C                 ; fd    : 2
1095  008C                 ; dup fd: __i_fcntl_fdstruct_1
1096  008C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1097  008C              
1098  008C              
1099  008C                 SECTION data_clib
1100  0000                 SECTION data_stdio
1101  0022              
1102  0022                 ; FILE *
1103  0022              
1104  0022                 PUBLIC _stderr
1105  0022              
1106  0022  26 00          _stderr:  defw __i_stdio_file_2 + 2
1107  0024              
1108  0024                 ; FILE structure
1109  0024              
1110  0024                 __i_stdio_file_2:
1111  0024              
1112  0024                    ; open files link
1113  0024              
1114  0024  13 00             defw __i_stdio_file_1
1115  0026              
1116  0026                    ; jump to duped fd
1117  0026              
1118  0026  C3                defb 195
1119  0027  6F 00             defw __i_fcntl_fdstruct_1
1120  0029              
1121  0029                    ; state_flags_0
1122  0029                    ; state_flags_1
1123  0029                    ; conversion flags
1124  0029                    ; ungetc
1125  0029              
1126  0029  80                defb 0x80
1127  002A  00                defb 0
1128  002B  00                defb 0
1129  002C  00                defb 0
1130  002D              
1131  002D                    ; mtx_recursive
1132  002D              
1133  002D  00                defb 0         ; thread owner = none
1134  002E  02                defb 0x02      ; mtx_recursive
1135  002F  00                defb 0         ; lock count = 0
1136  0030  FE                defb 0xfe      ; atomic spinlock
1137  0031  00 00             defw 0         ; list of blocked threads
1138  0033              
1139  0033              
1140  0033                 ; fd table entry
1141  0033              
1142  0033                 SECTION data_fcntl_fdtable_body
1143  0004  6F 00          defw __i_fcntl_fdstruct_1
1144  0006              
1145  0006                 ; FDSTRUCT structure
1146  0006              
1147  0006                 defc __i_fcntl_fdstruct_2 = __i_fcntl_fdstruct_1
1148  0006              
1149  0006                 ; adjust reference count on duped FDSTRUCT
1150  0006              
1151  0006                 SECTION code_crt_init
1152  0000              
1153  0000  21 76 00       ld hl,__i_fcntl_fdstruct_1 + 7     ; & FDSTRUCT.ref_count
1154  0003  34             inc (hl)
1155  0004  34             inc (hl)
1156  0005              
1157  0005              
1158  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1159  0005              
1160  0005              
1161  0005              
1162  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1163  0005                 ;; create open and closed FILE lists
1164  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1165  0005              
1166  0005                 ; __clib_fopen_max   = max number of open FILEs specified by user
1167  0005                 ; 3 = number of static FILEs instantiated in crt
1168  0005                 ; __i_stdio_file_n   = address of static FILE structure #n (0..I_STDIO_FILE_NUM-1)
1169  0005              
1170  0005              	PUBLIC __MAX_FOPEN
1171  0005              
1172  0005                 SECTION data_clib
1173  0000                 SECTION data_stdio
1174  0033              
1175  0033                 IF (__clib_fopen_max > 0) || (3 > 0)
1176  0033              
1177  0033                    ; number of FILEs > 0
1178  0033              
1179  0033                    ; construct list of open files
1180  0033              
1181  0033                    IF 3 > 0
1182  0033              
1183  0033                       ; number of FILEs statically generated > 0
1184  0033              
1185  0033                       SECTION data_clib
1186  0000                       SECTION data_stdio
1187  0033              
1188  0033                       PUBLIC __stdio_open_file_list
1189  0033              
1190  0033  24 00                __stdio_open_file_list:  defw __i_stdio_file_2
1191  0035              
1192  0035                    ELSE
1193  0035              
1194  0035                       ; number of FILEs statically generated = 0
1195  0035              
1196  0035                       SECTION bss_clib
1197  0035                       SECTION bss_stdio
1198  0035              
1199  0035                       PUBLIC __stdio_open_file_list
1200  0035              
1201  0035                       __stdio_open_file_list:  defw 0
1202  0035              
1203  0035                    ENDIF
1204  0035              
1205  0035                    ; construct list of closed / available FILEs
1206  0035              
1207  0035                    SECTION data_clib
1208  0000                    SECTION data_stdio
1209  0035              
1210  0035                    PUBLIC __stdio_closed_file_list
1211  0035              
1212  0035  00 00 35 00       __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
1213  0039              
1214  0039                    IF __clib_fopen_max > 3
1215  0039              
1216  0039              		   defc __MAX_FOPEN = __clib_fopen_max
1217  0039              
1218  0039                       ; create extra FILE structures
1219  0039              
1220  0039                       SECTION bss_clib
1221  0039                       SECTION bss_stdio
1222  0039              
1223  0039                       __stdio_file_extra:      defs (__clib_fopen_max - 3) * 15
1224  0039              
1225  0039                       SECTION code_crt_init
1226  0039              
1227  0039                          ld bc,__stdio_closed_file_list
1228  0039                          ld de,__stdio_file_extra
1229  0039                          ld l,__clib_fopen_max - 3
1230  0039              
1231  0039                       loop:
1232  0039              
1233  0039                          push hl
1234  0039              
1235  0039                          EXTERN asm_p_forward_list_alt_push_front
1236  0039                          call asm_p_forward_list_alt_push_front
1237  0039              
1238  0039                          ld de,15
1239  0039                          add hl,de
1240  0039                          ex de,hl
1241  0039              
1242  0039                          pop hl
1243  0039              
1244  0039                          dec l
1245  0039                          jr nz, loop
1246  0039              
1247  0039                    ELSE
1248  0039              
1249  0039                       defc __MAX_FOPEN = 3
1250  0039              
1251  0039                    ENDIF
1252  0039              
1253  0039                 ENDIF
1254  0039              
1255  0039                 IF (__clib_fopen_max = 0) && (3 = 0)
1256  0039              
1257  0039                    defc __MAX_FOPEN = 0
1258  0039              
1259  0039                    ; create empty file lists
1260  0039              
1261  0039                    SECTION bss_clib
1262  0039                    SECTION bss_stdio
1263  0039              
1264  0039                    PUBLIC __stdio_open_file_list
1265  0039                    __stdio_open_file_list:  defw 0
1266  0039              
1267  0039                    SECTION data_clib
1268  0039                    SECTION data_stdio
1269  0039              
1270  0039                    PUBLIC __stdio_closed_file_list
1271  0039                    __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
1272  0039              
1273  0039                 ENDIF
1274  0039              
1275  0039                 IF (__clib_fopen_max < 0) && (3 = 0)
1276  0039              
1277  0039                    defc __MAX_FOPEN = 0
1278  0039              
1279  0039                 ENDIF
1280  0039              
1281  0039                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1282  0039                 ;; create fd table
1283  0039                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1284  0039              
1285  0039                 ; __clib_open_max  = max number of open fds specified by user
1286  0039                 ; 3 = number of static file descriptors created
1287  0039              
1288  0039                 PUBLIC __fcntl_fdtbl
1289  0039                 PUBLIC __fcntl_fdtbl_size
1290  0039              
1291  0039                 IF 3 > 0
1292  0039              
1293  0039                    ; create rest of fd table in data segment
1294  0039              
1295  0039                    SECTION data_fcntl_fdtable_body
1296  0006              
1297  0006                    EXTERN __data_fcntl_fdtable_body_head
1298  0006              
1299  0006                    defc __fcntl_fdtbl = __data_fcntl_fdtable_body_head
1300  0006              
1301  0006                    IF __clib_open_max > 3
1302  0006              
1303  0006                       SECTION data_fcntl_fdtable_body
1304  0006              
1305  0006                       defs (__clib_open_max - 3) * 2
1306  0006                       defc __fcntl_fdtbl_size = __clib_open_max
1307  0006              
1308  0006                    ELSE
1309  0006              
1310  0006                       defc __fcntl_fdtbl_size = 3
1311  0006              
1312  0006                    ENDIF
1313  0006              
1314  0006                 ELSE
1315  0006              
1316  0006                    IF __clib_open_max > 0
1317  0006              
1318  0006                       ; create fd table in bss segment
1319  0006              
1320  0006                       SECTION bss_clib
1321  0006                       SECTION bss_fcntl
1322  0006              
1323  0006                       __fcntl_fdtbl:        defs __clib_open_max * 2
1324  0006              
1325  0006                    ELSE
1326  0006              
1327  0006                       ; no fd table at all
1328  0006              
1329  0006                       defc __fcntl_fdtbl = 0
1330  0006              
1331  0006                    ENDIF
1332  0006              
1333  0006                    defc __fcntl_fdtbl_size = __clib_open_max
1334  0006              
1335  0006                 ENDIF
1336  0006              
1337  0006              	PUBLIC __MAX_OPEN
1338  0006              	defc   __MAX_OPEN = __fcntl_fdtbl_size
1339  0006              
1340  0006                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1341  0006                 ;; finalize stdio heap
1342  0006                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1343  0006              
1344  0006                 ; __clib_stdio_heap_size  = desired stdio heap size in bytes
1345  0006                 ; 140  = byte size of static FDSTRUCTs
1346  0006                 ; 2   = number of heap allocations
1347  0006                 ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
1348  0006              
1349  0006                 IF 140 > 0
1350  0006              
1351  0006                    ; static FDSTRUCTs have been allocated in the heap
1352  0006              
1353  0006                    SECTION data_clib
1354  0000                    SECTION data_fcntl
1355  0000              
1356  0000                    PUBLIC __stdio_heap
1357  0000              
1358  0000  00 00             __stdio_heap:            defw __stdio_block
1359  0002              
1360  0002                    SECTION data_fcntl_stdio_heap_head
1361  0000              
1362  0000                    __stdio_block:
1363  0000              
1364  0000  00                   defb 0                ; no owner
1365  0001  01                   defb 0x01             ; mtx_plain
1366  0002  00                   defb 0                ; number of lock acquisitions
1367  0003  FE                   defb 0xfe             ; spinlock (unlocked)
1368  0004  00 00                defw 0                ; list of threads blocked on mutex
1369  0006              
1370  0006                    IF __clib_stdio_heap_size > (140 + 14)
1371  0006              
1372  0006                       ; expand stdio heap to desired size
1373  0006              
1374  0006                       SECTION data_fcntl_stdio_heap_body
1375  008C              
1376  008C                       __i_fcntl_heap_2:
1377  008C              
1378  008C  00 00                   defw __i_fcntl_heap_3
1379  008E  00 00                   defw 0
1380  0090  69 00                   defw __i_fcntl_heap_1
1381  0092  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00B2  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00D2  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00F2  00 00 00 00 00 00 
                                    defs __clib_stdio_heap_size - 140 - 14
1382  00F8              
1383  00F8                       ; terminate stdio heap
1384  00F8              
1385  00F8                       SECTION data_fcntl_stdio_heap_tail
1386  0000              
1387  0000  00 00                __i_fcntl_heap_3:   defw 0
1388  0002              
1389  0002                    ELSE
1390  0002              
1391  0002                       ; terminate stdio heap
1392  0002              
1393  0002                       SECTION data_fcntl_stdio_heap_tail
1394  0002              
1395  0002                       __i_fcntl_heap_2:   defw 0
1396  0002              
1397  0002                    ENDIF
1398  0002              
1399  0002                 ELSE
1400  0002              
1401  0002                    ; no FDSTRUCTs statically created
1402  0002              
1403  0002                    IF __clib_stdio_heap_size > 14
1404  0002              
1405  0002                       SECTION data_clib
1406  0002                       SECTION data_fcntl
1407  0002              
1408  0002                       PUBLIC __stdio_heap
1409  0002              
1410  0002                       __stdio_heap:         defw __stdio_block
1411  0002              
1412  0002                       SECTION bss_clib
1413  0002                       SECTION bss_fcntl
1414  0002              
1415  0002                       PUBLIC __stdio_block
1416  0002              
1417  0002                       __stdio_block:         defs __clib_stdio_heap_size
1418  0002              
1419  0002                       SECTION code_crt_init
1420  0002              
1421  0002                       ld hl,__stdio_block
1422  0002                       ld bc,__clib_stdio_heap_size
1423  0002              
1424  0002                       EXTERN asm_heap_init
1425  0002                       call asm_heap_init
1426  0002              
1427  0002                    ENDIF
1428  0002              
1429  0002                 ENDIF
1430  0002              
1431  0002              
1432  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1433  0002              ;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1434  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1435  0002              
1436  0002              SECTION CODE
1437  0000              
1438  0000              PUBLIC __Start, __Exit
1439  0000              
1440  0000              EXTERN _main
1441  0000              
1442  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1443  0000              ;; USER PREAMBLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1444  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1445  0000              
1446  0000              IF __crt_include_preamble
1447  0000              
1448  0000                 include "crt_preamble.asm"
1449  0000                 SECTION CODE
1450  0000              
1451  0000              ENDIF
1452  0000              
1453  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1454  0000              ;; PAGE ZERO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1455  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1456  0000              
1457  0000              IF (ASMPC = 0) && (__crt_org_code = 0)
1458  0000              
1459  0000                 include "../crt_page_zero_z80.inc"
1460  0000              
1461  0000              ENDIF
1462  0000              
1463  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1464  0000              ;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1465  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1466  0000              
1467  0000              __Start:
1468  0000              
1469  0000                 include "../crt_start_di.inc"
1     0000                 IF (__crt_enable_eidi & 0x01)
2     0000              
3     0000  F3                di
4     0001              
5     0001                 ENDIF
6     0001              
1470  0001              
1471  0001                 IF __crt_org_vector_table != 0
1472  0001              
1473  0001                    EXTERN __code_vector_head
1474  0001              
1475  0001                    ld a,__code_vector_head/256
1476  0001                    ld i,a
1477  0001              
1478  0001                 ENDIF
1479  0001              
1480  0001                 include "../crt_set_interrupt_mode.inc"
1     0001                 IF (__crt_interrupt_mode >= 0) && (__crt_interrupt_mode <= 2)
2     0001              
3     0001                    im __crt_interrupt_mode
4     0001              
5     0001                 ENDIF
6     0001              
1481  0001              
1482  0001                 IF (__crt_on_exit & 0x10000) && (__crt_on_exit & 0x20000) && (!(__crt_on_exit & 0x8)) && (__crt_on_exit & 0x2)
1483  0001              
1484  0001                    ; returning to basic
1485  0001              
1486  0001  FD E5             push iy
1487  0003  D9                exx
1488  0004  E5                push hl
1489  0005              
1490  0005                    IF __crt_enable_commandline = 2
1491  0005              
1492  0005                       exx
1493  0005              
1494  0005                    ENDIF
1495  0005              
1496  0005                 ENDIF
1497  0005              
1498  0005                 include "../crt_save_sp.inc"
1     0005              
2     0005                 ; do not save sp if
3     0005                 ; * program jumps to address on exit
4     0005                 ; * program halts on exit
5     0005              
6     0005                 IF (__crt_on_exit & 0x10000)
7     0005              
8     0005                    IF (__crt_on_exit & 0x8)
9     0005              
10    0005                       ; program restarts on exit
11    0005              
12    0005                       IF (__register_sp = -1)
13    0005              
14    0005                          ld (__sp_or_ret),sp
15    0005              
16    0005                       ENDIF
17    0005              
18    0005                    ELSE
19    0005              
20    0005                       IF (__crt_on_exit & 0x2)
21    0005              
22    0005                          ; program returns to caller on exit
23    0005              
24    0005  ED 73 00 00             ld (__sp_or_ret),sp
25    0009              
26    0009                       ELSE
27    0009              
28    0009                          IF (__crt_on_exit & 0x4)
29    0009              
30    0009                             ; program jumps to caller on exit
31    0009              
32    0009                             IF (__crt_enable_commandline != 2)
33    0009              
34    0009                                pop hl
35    0009                                ld (__sp_or_ret),hl
36    0009              
37    0009                             ELSE
38    0009              
39    0009                                pop de
40    0009                                ld (__sp_or_ret),de
41    0009              
42    0009                             ENDIF
43    0009              
44    0009                          ENDIF
45    0009              
46    0009                       ENDIF
47    0009              
48    0009                    ENDIF
49    0009              
50    0009                 ENDIF
51    0009              
1499  0009              
1500  0009              __Restart:
1501  0009              
1502  0009                 include "../crt_init_sp.inc"
1     0009              IF __register_sp < -1
2     0009              
3     0009                 ld sp,(-__register_sp)      ; stack location is stored at memory address
4     0009              
5     0009              ELSE
6     0009              
7     0009                 IF __register_sp != -1
8     0009              
9     0009  31 58 FF          ld sp,__register_sp      ; stack is at fixed address
10    000C              
11    000C                 ENDIF
12    000C              
13    000C              ENDIF
14    000C              
1503  000C              
1504  000C                 ; command line
1505  000C              
1506  000C                 IF (__crt_enable_commandline = 1) || (__crt_enable_commandline >= 3)
1507  000C              
1508  000C                    include "../crt_cmdline_empty.inc"
1509  000C              
1510  000C                 ENDIF
1511  000C              
1512  000C              __Restart_2:
1513  000C              
1514  000C                 IF __crt_enable_commandline >= 1
1515  000C              
1516  000C                    push hl                  ; argv
1517  000C                    push bc                  ; argc
1518  000C              
1519  000C                 ENDIF
1520  000C              
1521  000C                 ; initialize data section
1522  000C              
1523  000C                 include "../clib_init_data.inc"
1     000C              
2     000C                 ; initialize data section
3     000C              
4     000C                 IF (__crt_model = 1)
5     000C              
6     000C                    ; rom model + data section is not compressed
7     000C              
8     000C                    EXTERN __CODE_END_tail
9     000C                    EXTERN __DATA_head, __DATA_END_tail
10    000C              
11    000C                    ld hl,__CODE_END_tail
12    000C                    ld de,__DATA_head
13    000C                    ld bc,__DATA_END_tail - __DATA_head
14    000C              
15    000C                    EXTERN asm_memcpy
16    000C                    call   asm_memcpy
17    000C              
18    000C                 ENDIF
19    000C              
20    000C                 IF (__crt_model >= 2)
21    000C              
22    000C                    ; rom model + data section is compressed
23    000C              
24    000C                    EXTERN __CODE_END_tail
25    000C              		EXTERN __DATA_head, __DATA_END_tail
26    000C              
27    000C                    ld hl,__CODE_END_tail
28    000C                    ld de,__DATA_head
29    000C                    ld bc,__DATA_END_tail - __DATA_head
30    000C              
31    000C                    ld a,b
32    000C                    or c
33    000C              
34    000C                    EXTERN   asm_dzx7_standard
35    000C                    call nz, asm_dzx7_standard
36    000C              
37    000C                 ENDIF
38    000C              
1524  000C              
1525  000C                 ; initialize bss section
1526  000C              
1527  000C                 include "../clib_init_bss.inc"
1     000C              
2     000C                 ; initialize bss section
3     000C              
4     000C                 IF __crt_initialize_bss
5     000C              
6     000C                       EXTERN asm_memset
7     000C                       EXTERN __BSS_head, __BSS_UNINITIALIZED_head
8     000C              
9     000C                       ld hl,__BSS_head
10    000C                       ld bc,__BSS_UNINITIALIZED_head - __BSS_head
11    000C              
12    000C                       ld e,0
13    000C                       call asm_memset
14    000C              
15    000C                 ENDIF
16    000C              
1528  000C              
1529  000C              SECTION code_crt_init          ; user and library initialization
1530  0005              SECTION code_crt_main
1531  0000              
1532  0000                 include "../crt_start_ei.inc"
1     0000                 IF (__crt_enable_eidi & 0x02)
2     0000              
3     0000                    ei
4     0000              
5     0000                 ENDIF
6     0000              
1533  0000              
1534  0000                 ; call user program
1535  0000              
1536  0000  CD 00 00       call _main                  ; hl = return status
1537  0003              
1538  0003                 ; run exit stack
1539  0003              
1540  0003                 IF __clib_exit_stack_size > 0
1541  0003              
1542  0003                    EXTERN asm_exit
1543  0003                    jp asm_exit              ; exit function jumps to __Exit
1544  0003              
1545  0003                 ENDIF
1546  0003              
1547  0003              __Exit:
1548  0003              
1549  0003                 IF !((__crt_on_exit & 0x10000) && (__crt_on_exit & 0x8))
1550  0003              
1551  0003                    ; not restarting
1552  0003              
1553  0003  E5                push hl                  ; save return status
1554  0004              
1555  0004                 ENDIF
1556  0004              
1557  0004              SECTION code_crt_exit          ; user and library cleanup
1558  0000              SECTION code_crt_return
1559  0000              
1560  0000                 ; close files
1561  0000              
1562  0000                 include "../clib_close.inc"
1     0000                 IF __crt_enable_close
2     0000              
3     0000                    ; TODO
4     0000                    ; close open files
5     0000              
6     0000                 ENDIF
7     0000              
1563  0000              
1564  0000                 ; terminate
1565  0000              
1566  0000                 IF (__crt_on_exit & 0x10000) && (__crt_on_exit & 0x20000) && (!(__crt_on_exit & 0x8)) && (__crt_on_exit & 0x2)
1567  0000              
1568  0000                    ; returning to basic
1569  0000              
1570  0000  C1                pop bc
1571  0001              
1572  0001  ED 7B 00 00       ld sp,(__sp_or_ret)
1573  0005              
1574  0005  D9                exx
1575  0006  E1                pop hl
1576  0007  D9                exx
1577  0008  FD E1             pop iy
1578  000A              
1579  000A  ED 56             im 1
1580  000C  FB                ei
1581  000D  C9                ret
1582  000E              
1583  000E                 ELSE
1584  000E              
1585  000E                    include "../crt_exit_eidi.inc"
1586  000E                    include "../crt_restore_sp.inc"
1587  000E                    include "../crt_program_exit.inc"
1588  000E              
1589  000E                 ENDIF
1590  000E              
1591  000E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1592  000E              ;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1593  000E              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1594  000E              
1595  000E              IF (__crt_on_exit & 0x10000) && ((__crt_on_exit & 0x6) || ((__crt_on_exit & 0x8) && (__register_sp = -1)))
1596  000E              
1597  000E                 SECTION BSS_UNINITIALIZED
1598  0000  00 00          __sp_or_ret:  defw 0
1599  0002              
1600  0002              ENDIF
1601  0002              
1602  0002              include "../clib_variables.inc"
1     0002              
2     0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0002              ;; library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0002              
6     0002              IF __clib_balloc_table_size > 0
7     0002              
8     0002                 ; create balloc table
9     0002              
10    0002                 SECTION data_clib
11    0002                 SECTION data_alloc_balloc
12    0002              
13    0002                 PUBLIC __balloc_array
14    0002              
15    0002                 __balloc_array:             defw __balloc_table
16    0002              
17    0002                 SECTION bss_clib
18    0002                 SECTION bss_alloc_balloc
19    0002              
20    0002                 __balloc_table:             defs __clib_balloc_table_size * 2
21    0002              
22    0002              ENDIF
23    0002              
24    0002              IF __clib_malloc_heap_size = -1
25    0002              
26    0002                 ; place malloc heap between bss section and bottom of the stack
27    0002              
28    0002                 SECTION data_clib
29    0000                 SECTION data_alloc_malloc
30    0000              
31    0000                 PUBLIC __malloc_heap
32    0000              
33    0000                 EXTERN __BSS_END_tail
34    0000              
35    0000  00 00          __malloc_heap:              defw __BSS_END_tail
36    0002              
37    0002                 SECTION code_crt_init
38    0005              
39    0005  21 FF FF       ld hl,-1                    ; ensure sp == 0 is accepted
40    0008  39             add hl,sp                   ; hl = top of the stack
41    0009              
42    0009  11 00 00       ld de,__BSS_END_tail
43    000C              
44    000C  AF             xor a
45    000D  ED 52          sbc hl,de                   ; hl = space between top of stack and end of bss - 1
46    000F              
47    000F  DA 03 00       jp c, __Exit                ; if stack overlaps bss, this is a fatal error
48    0012              
49    0012  01 0E 02       ld bc,__crt_stack_size + 14 ; amount of space reserved by stack + minimum heap size - 1
50    0015  ED 42          sbc hl,bc                   ; hl = max heap size - 15
51    0017              
52    0017  DA 03 00       jp c, __Exit                ; if no room for heap, this is a fatal error
53    001A              
54    001A  01 0F 00       ld bc,15
55    001D  09             add hl,bc
56    001E              
57    001E  4D             ld c,l
58    001F  44             ld b,h                      ; bc = available heap size
59    0020              
60    0020  EB             ex de,hl                    ; hl = __BSS_END_tail = start of heap
61    0021              
62    0021                 EXTERN asm_heap_init
63    0021  CD 00 00       call asm_heap_init
64    0024              
65    0024              ENDIF
66    0024              
67    0024              IF __clib_malloc_heap_size > 14
68    0024              
69    0024                 ; create malloc heap in bss section
70    0024              
71    0024                 SECTION data_clib
72    0024                 SECTION data_alloc_malloc
73    0024              
74    0024                 PUBLIC __malloc_heap
75    0024              
76    0024                 __malloc_heap:              defw __malloc_block
77    0024              
78    0024                 SECTION bss_clib
79    0024                 SECTION bss_alloc_malloc
80    0024              
81    0024                 __malloc_block:             defs __clib_malloc_heap_size
82    0024              
83    0024                 SECTION code_crt_init
84    0024              
85    0024                 ld hl,__malloc_block
86    0024                 ld bc,__clib_malloc_heap_size
87    0024              
88    0024                 EXTERN asm_heap_init
89    0024                 call asm_heap_init
90    0024              
91    0024              ENDIF
92    0024              
93    0024                 ; create exit stack
94    0024              
95    0024                 SECTION bss_clib
96    0000                 SECTION bss_stdlib
97    0000              
98    0000                 PUBLIC __exit_stack
99    0000              
100   0000  00             __exit_stack:               defb 0
101   0001                                             defs __exit_stack_size * 2
102   0001              
103   0001                 ; create quickexit stack
104   0001              
105   0001                 SECTION bss_clib
106   0000                 SECTION bss_stdlib
107   0001              
108   0001                 PUBLIC __quickexit_stack
109   0001              
110   0001  00             __quickexit_stack:          defb 0
111   0002                                             defs __quickexit_stack_size * 2
112   0002              
113   0002                 ; assign thread id
114   0002              
115   0002                 SECTION data_clib
116   0000                 SECTION data_threads
117   0000              
118   0000                 PUBLIC __thrd_id
119   0000              
120   0000  01             __thrd_id:                  defb 1
121   0001              
122   0001              ;; end library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
123   0001              
1603  0001              
1604  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1605  0001              ;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1606  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1607  0001              
1608  0001              include "../clib_stubs.inc"
1     0001              
2     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0001                 ;; unimplemented
4     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0001              
6     0001                 ; system()
7     0001              
8     0001                 PUBLIC __ch_system
9     0001              
10    0001                 EXTERN error_zc
11    0001              
12    0001                 defc __ch_system = error_zc
13    0001              
14    0001                 ; threads
15    0001                 ; these functions are preliminary only
16    0001              
17    0001                 PUBLIC __thread_context_switch
18    0001                 PUBLIC __thread_block_timeout
19    0001                 PUBLIC __thread_unblock
20    0001              
21    0001                 EXTERN l_ret
22    0001              
23    0001                 defc __thread_context_switch = l_ret
24    0001                 defc __thread_block_timeout  = l_ret
25    0001                 defc __thread_unblock        = l_ret
26    0001              
27    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0001                 ;; dynamically generated functions
29    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0001              
31    0001                 ; dynamic printf
32    0001              
33    0001                 IFNDEF CLIB_OPT_PRINTF
34    0001                    IFDEF CLIB_OPT_PRINTF_2
35    0001                       defc CLIB_OPT_PRINTF = 0
36    0001                    ENDIF
37    0001                 ENDIF
38    0001              
39    0001                 IFNDEF CLIB_OPT_PRINTF_2
40    0001                    IFDEF CLIB_OPT_PRINTF
41    0001                       defc CLIB_OPT_PRINTF_2 = 0
42    0001                    ENDIF
43    0001                 ENDIF
44    0001              
45    0001                 IFDEF CLIB_OPT_PRINTF
46    0001              
47    0001                    IF __SDCC_IY
48    0001              
49    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked_iy.asm"
50    0001              
51    0001                    ELSE
52    0001              
53    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked.asm"
54    0001              
55    0001                    ENDIF
56    0001              
57    0001                 ENDIF
58    0001              
59    0001                 ; dynamic scanf
60    0001              
61    0001                 IFNDEF CLIB_OPT_SCANF
62    0001                    IFDEF CLIB_OPT_SCANF_2
63    0001                       defc CLIB_OPT_SCANF = 0
64    0001                    ENDIF
65    0001                 ENDIF
66    0001              
67    0001                 IFNDEF CLIB_OPT_SCANF_2
68    0001                    IFDEF CLIB_OPT_SCANF
69    0001                       defc CLIB_OPT_SCANF_2 = 0
70    0001                    ENDIF
71    0001                 ENDIF
72    0001              
73    0001                 IFDEF CLIB_OPT_SCANF
74    0001              
75    0001                    IF __SDCC_IY
76    0001              
77    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked_iy.asm"
78    0001              
79    0001                    ELSE
80    0001              
81    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked.asm"
82    0001              
83    0001                    ENDIF
84    0001              
85    0001                 ENDIF
86    0001              
1609  0001              
1610  0001              
1611  0001              
1612  0001              
1613  0001              
1614  0001              
1615  0001              
1616  0001              
1617  0001              
1618  0001              
1619  0001              
1620  0001              
1621  0001              
1622  0001              
1623  0001              
1624  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1625  0001              ;; if 2 cartridge ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1626  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1627  0001              
1628  0001              
1629  0001              
1630  0001              
1631  0001              
1632  0001              
1633  0001              
1634  0001              
1635  0001              
1636  0001              
1637  0001              
1638  0001              
1639  0001              
1640  0001              
1641  0001              
